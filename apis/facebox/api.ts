// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * !!GENERATED FILE!!
 *
 * WARNING:  Do not edit this file, changes will be overwritten.
 *
 * Facebox API
 * Facebox API descriptors (unofficial)
 *
 * @mbx/api-facebox v1.0.0
 */

import * as url from 'url';
import { Configuration } from './configuration';
import axios, { AxiosPromise } from 'axios';

const BASE_PATH = 'http://localhost:8080'.replace(/\/+$/, '');

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
  csv: ',',
  ssv: ' ',
  tsv: '\t',
  pipes: '|',
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
  url: string;
  options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
  protected configuration: Configuration | undefined;

  constructor(
    configuration?: Configuration,
    protected basePath: string = BASE_PATH
  ) {
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
  }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
  name: 'RequiredError' = 'RequiredError';
  constructor(public field: string, msg?: string) {
    super(msg);
  }
}

/**
 *
 * @export
 * @interface APIError
 */
export interface APIError {
  /**
   *
   * @type {boolean}
   * @memberof APIError
   */
  success?: boolean;
  /**
   *
   * @type {string}
   * @memberof APIError
   */
  error?: string;
}

/**
 *
 * @export
 * @interface CheckFaceprintBody
 */
export interface CheckFaceprintBody {
  /**
   *
   * @type {Array<CheckFaceprintBodyFaceprintsItems>}
   * @memberof CheckFaceprintBody
   */
  faceprints?: Array<CheckFaceprintBodyFaceprintsItems>;
  /**
   *
   * @type {boolean}
   * @memberof CheckFaceprintBody
   */
  success?: boolean;
}

/**
 *
 * @export
 * @interface CheckFaceprintBodyFaceprintsItems
 */
export interface CheckFaceprintBodyFaceprintsItems {
  /**
   *
   * @type {number}
   * @memberof CheckFaceprintBodyFaceprintsItems
   */
  confidence?: number;
  /**
   *
   * @type {string}
   * @memberof CheckFaceprintBodyFaceprintsItems
   */
  id?: string;
  /**
   *
   * @type {boolean}
   * @memberof CheckFaceprintBodyFaceprintsItems
   */
  matched?: boolean;
  /**
   *
   * @type {string}
   * @memberof CheckFaceprintBodyFaceprintsItems
   */
  name?: string;
}

/**
 *
 * @export
 * @interface CheckFaceprintParamsBody
 */
export interface CheckFaceprintParamsBody {
  /**
   *
   * @type {Array<string>}
   * @memberof CheckFaceprintParamsBody
   */
  faceprints: Array<string>;
}

/**
 *
 * @export
 * @interface CheckImageBody
 */
export interface CheckImageBody {
  /**
   *
   * @type {Array<Face>}
   * @memberof CheckImageBody
   */
  faces: Array<Face>;
  /**
   *
   * @type {number}
   * @memberof CheckImageBody
   */
  facesCount: number;
  /**
   *
   * @type {boolean}
   * @memberof CheckImageBody
   */
  success: boolean;
}

/**
 *
 * @export
 * @interface CheckImageParamsBody
 */
export interface CheckImageParamsBody {
  /**
   *
   * @type {string}
   * @memberof CheckImageParamsBody
   */
  base64?: string;
  /**
   *
   * @type {boolean}
   * @memberof CheckImageParamsBody
   */
  faceprint?: boolean;
  /**
   * URL to image
   * @type {string}
   * @memberof CheckImageParamsBody
   */
  url?: string;
}

/**
 *
 * @export
 * @interface CompareFaceprintParamsBody
 */
export interface CompareFaceprintParamsBody {
  /**
   *
   * @type {Array<string>}
   * @memberof CompareFaceprintParamsBody
   */
  faceprints: Array<string>;
  /**
   *
   * @type {string}
   * @memberof CompareFaceprintParamsBody
   */
  target: string;
}

/**
 *
 * @export
 * @interface Face
 */
export interface Face {
  /**
   *
   * @type {number}
   * @memberof Face
   */
  confidence: number;
  /**
   *
   * @type {string}
   * @memberof Face
   */
  faceprint: string;
  /**
   *
   * @type {string}
   * @memberof Face
   */
  id: string;
  /**
   *
   * @type {boolean}
   * @memberof Face
   */
  matched: boolean;
  /**
   *
   * @type {string}
   * @memberof Face
   */
  name: string;
  /**
   *
   * @type {Rect}
   * @memberof Face
   */
  rect: Rect;
}

/**
 *
 * @export
 * @interface GetBoxInfoOKBody
 */
export interface GetBoxInfoOKBody {
  /**
   *
   * @type {string}
   * @memberof GetBoxInfoOKBody
   */
  build?: string;
  /**
   *
   * @type {string}
   * @memberof GetBoxInfoOKBody
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof GetBoxInfoOKBody
   */
  plan?: string;
  /**
   *
   * @type {string}
   * @memberof GetBoxInfoOKBody
   */
  status?: string;
  /**
   *
   * @type {boolean}
   * @memberof GetBoxInfoOKBody
   */
  success?: boolean;
  /**
   *
   * @type {number}
   * @memberof GetBoxInfoOKBody
   */
  version?: number;
}

/**
 *
 * @export
 * @interface GetSimilarBody
 */
export interface GetSimilarBody {
  /**
   *
   * @type {Array<SimilarFace>}
   * @memberof GetSimilarBody
   */
  faces: Array<SimilarFace>;
  /**
   *
   * @type {boolean}
   * @memberof GetSimilarBody
   */
  success?: boolean;
}

/**
 *
 * @export
 * @interface GetSimilarParamsBody
 */
export interface GetSimilarParamsBody {
  /**
   *
   * @type {string}
   * @memberof GetSimilarParamsBody
   */
  base64?: string;
  /**
   *
   * @type {string}
   * @memberof GetSimilarParamsBody
   */
  url?: string;
}

/**
 *
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
  /**
   *
   * @type {boolean}
   * @memberof InlineResponse200
   */
  success?: boolean;
  /**
   *
   * @type {Array<number>}
   * @memberof InlineResponse200
   */
  confidences?: Array<number>;
}

/**
 *
 * @export
 * @interface Rect
 */
export interface Rect {
  /**
   *
   * @type {number}
   * @memberof Rect
   */
  height: number;
  /**
   *
   * @type {number}
   * @memberof Rect
   */
  left: number;
  /**
   *
   * @type {number}
   * @memberof Rect
   */
  top: number;
  /**
   *
   * @type {number}
   * @memberof Rect
   */
  width: number;
}

/**
 *
 * @export
 * @interface RenameParamsBody
 */
export interface RenameParamsBody {
  /**
   *
   * @type {string}
   * @memberof RenameParamsBody
   */
  name: string;
}

/**
 *
 * @export
 * @interface Similar
 */
export interface Similar {
  /**
   *
   * @type {number}
   * @memberof Similar
   */
  confidence: number;
  /**
   *
   * @type {string}
   * @memberof Similar
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof Similar
   */
  name: string;
}

/**
 *
 * @export
 * @interface SimilarFace
 */
export interface SimilarFace {
  /**
   *
   * @type {Rect}
   * @memberof SimilarFace
   */
  rect: Rect;
  /**
   *
   * @type {Array<Similar>}
   * @memberof SimilarFace
   */
  similarFaces: Array<Similar>;
}

/**
 *
 * @export
 * @interface SuccessfulAPIResponse
 */
export interface SuccessfulAPIResponse {
  /**
   *
   * @type {boolean}
   * @memberof SuccessfulAPIResponse
   */
  successs?: boolean;
}

/**
 *
 * @export
 * @interface TeachFaceParamsBody
 */
export interface TeachFaceParamsBody {
  /**
   *
   * @type {string}
   * @memberof TeachFaceParamsBody
   */
  base64?: string;
  /**
   *
   * @type {string}
   * @memberof TeachFaceParamsBody
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof TeachFaceParamsBody
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof TeachFaceParamsBody
   */
  url?: string;
}

/**
 * FaceboxApi - axios parameter creator
 * @export
 */
export const FaceboxApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     * Use the /tagbox/check endpoint to get tags for a specified image.
     * @summary checkFaceprint
     * @param {CheckFaceprintParamsBody} checkFaceprintParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkFaceprint(
      checkFaceprintParamsBody: CheckFaceprintParamsBody,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'checkFaceprintParamsBody' is not null or undefined
      if (
        checkFaceprintParamsBody === null ||
        checkFaceprintParamsBody === undefined
      ) {
        throw new RequiredError(
          'checkFaceprintParamsBody',
          'Required parameter checkFaceprintParamsBody was null or undefined when calling checkFaceprint.'
        );
      }
      const localVarPath = `/facebox/faceprint/check`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign(
        { method: 'POST' },
        baseOptions,
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      if (configuration && configuration.userAgent) {
        localVarHeaderParameter['User-Agent'] = configuration.userAgent;
      } else {
        localVarHeaderParameter['User-Agent'] = 'facebox-SDK/js/1.0.1';
      }
      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarHeaderParameter['Authorization'] =
          'Basic ' +
          btoa(configuration.username + ':' + configuration.password);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>'CheckFaceprintParamsBody' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(checkFaceprintParamsBody || {})
        : checkFaceprintParamsBody || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Use the /tagbox/check endpoint to get tags for a specified image.
     * @summary checkImage
     * @param {CheckImageParamsBody} checkImageParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkImage(
      checkImageParamsBody: CheckImageParamsBody,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'checkImageParamsBody' is not null or undefined
      if (checkImageParamsBody === null || checkImageParamsBody === undefined) {
        throw new RequiredError(
          'checkImageParamsBody',
          'Required parameter checkImageParamsBody was null or undefined when calling checkImage.'
        );
      }
      const localVarPath = `/facebox/check`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign(
        { method: 'POST' },
        baseOptions,
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      if (configuration && configuration.userAgent) {
        localVarHeaderParameter['User-Agent'] = configuration.userAgent;
      } else {
        localVarHeaderParameter['User-Agent'] = 'facebox-SDK/js/1.0.1';
      }
      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarHeaderParameter['Authorization'] =
          'Basic ' +
          btoa(configuration.username + ':' + configuration.password);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>'CheckImageParamsBody' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(checkImageParamsBody || {})
        : checkImageParamsBody || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Compare multiple faceprints.
     * @summary compareFaceprint
     * @param {CompareFaceprintParamsBody} compareFaceprintParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    compareFaceprint(
      compareFaceprintParamsBody: CompareFaceprintParamsBody,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'compareFaceprintParamsBody' is not null or undefined
      if (
        compareFaceprintParamsBody === null ||
        compareFaceprintParamsBody === undefined
      ) {
        throw new RequiredError(
          'compareFaceprintParamsBody',
          'Required parameter compareFaceprintParamsBody was null or undefined when calling compareFaceprint.'
        );
      }
      const localVarPath = `/facebox/faceprint/compare`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign(
        { method: 'POST' },
        baseOptions,
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      if (configuration && configuration.userAgent) {
        localVarHeaderParameter['User-Agent'] = configuration.userAgent;
      } else {
        localVarHeaderParameter['User-Agent'] = 'facebox-SDK/js/1.0.1';
      }
      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarHeaderParameter['Authorization'] =
          'Basic ' +
          btoa(configuration.username + ':' + configuration.password);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>'CompareFaceprintParamsBody' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(compareFaceprintParamsBody || {})
        : compareFaceprintParamsBody || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get similar faces to a new or unknown face
     * @summary getSimilar
     * @param {GetSimilarParamsBody} getSimilarParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSimilar(
      getSimilarParamsBody: GetSimilarParamsBody,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'getSimilarParamsBody' is not null or undefined
      if (getSimilarParamsBody === null || getSimilarParamsBody === undefined) {
        throw new RequiredError(
          'getSimilarParamsBody',
          'Required parameter getSimilarParamsBody was null or undefined when calling getSimilar.'
        );
      }
      const localVarPath = `/facebox/similars`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign(
        { method: 'POST' },
        baseOptions,
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      if (configuration && configuration.userAgent) {
        localVarHeaderParameter['User-Agent'] = configuration.userAgent;
      } else {
        localVarHeaderParameter['User-Agent'] = 'facebox-SDK/js/1.0.1';
      }
      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarHeaderParameter['Authorization'] =
          'Basic ' +
          btoa(configuration.username + ':' + configuration.password);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>'GetSimilarParamsBody' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(getSimilarParamsBody || {})
        : getSimilarParamsBody || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary getSimilarById
     * @param {string} id
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSimilarById(id: string, limit?: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling getSimilarById.'
        );
      }
      const localVarPath = `/facebox/similar?id={id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign(
        { method: 'GET' },
        baseOptions,
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      if (configuration && configuration.userAgent) {
        localVarHeaderParameter['User-Agent'] = configuration.userAgent;
      } else {
        localVarHeaderParameter['User-Agent'] = 'facebox-SDK/js/1.0.1';
      }
      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarHeaderParameter['Authorization'] =
          'Basic ' +
          btoa(configuration.username + ':' + configuration.password);
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary rename
     * @param {string} id
     * @param {RenameParamsBody} renameParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rename(
      id: string,
      renameParamsBody: RenameParamsBody,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling rename.'
        );
      }
      // verify required parameter 'renameParamsBody' is not null or undefined
      if (renameParamsBody === null || renameParamsBody === undefined) {
        throw new RequiredError(
          'renameParamsBody',
          'Required parameter renameParamsBody was null or undefined when calling rename.'
        );
      }
      const localVarPath = `/facebox/teach/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign(
        { method: 'POST' },
        baseOptions,
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      if (configuration && configuration.userAgent) {
        localVarHeaderParameter['User-Agent'] = configuration.userAgent;
      } else {
        localVarHeaderParameter['User-Agent'] = 'facebox-SDK/js/1.0.1';
      }
      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarHeaderParameter['Authorization'] =
          'Basic ' +
          btoa(configuration.username + ':' + configuration.password);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>'RenameParamsBody' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(renameParamsBody || {})
        : renameParamsBody || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Teach facebox a face
     * @summary teach
     * @param {TeachFaceParamsBody} teachFaceParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teach(
      teachFaceParamsBody: TeachFaceParamsBody,
      options: any = {}
    ): RequestArgs {
      // verify required parameter 'teachFaceParamsBody' is not null or undefined
      if (teachFaceParamsBody === null || teachFaceParamsBody === undefined) {
        throw new RequiredError(
          'teachFaceParamsBody',
          'Required parameter teachFaceParamsBody was null or undefined when calling teach.'
        );
      }
      const localVarPath = `/facebox/teach`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign(
        { method: 'POST' },
        baseOptions,
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      if (configuration && configuration.userAgent) {
        localVarHeaderParameter['User-Agent'] = configuration.userAgent;
      } else {
        localVarHeaderParameter['User-Agent'] = 'facebox-SDK/js/1.0.1';
      }
      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarHeaderParameter['Authorization'] =
          'Basic ' +
          btoa(configuration.username + ':' + configuration.password);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );
      const needsSerialization =
        <any>'TeachFaceParamsBody' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(teachFaceParamsBody || {})
        : teachFaceParamsBody || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * FaceboxApi - functional programming interface
 * @export
 */
export const FaceboxApiFp = function(configuration?: Configuration) {
  return {
    /**
     * Use the /tagbox/check endpoint to get tags for a specified image.
     * @summary checkFaceprint
     * @param {CheckFaceprintParamsBody} checkFaceprintParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkFaceprint(
      checkFaceprintParamsBody: CheckFaceprintParamsBody,
      options?: any
    ): (basePath?: string) => AxiosPromise<CheckFaceprintBody> {
      const localVarAxiosArgs = FaceboxApiAxiosParamCreator(
        configuration
      ).checkFaceprint(checkFaceprintParamsBody, options);
      return (basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Use the /tagbox/check endpoint to get tags for a specified image.
     * @summary checkImage
     * @param {CheckImageParamsBody} checkImageParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkImage(
      checkImageParamsBody: CheckImageParamsBody,
      options?: any
    ): (basePath?: string) => AxiosPromise<CheckImageBody> {
      const localVarAxiosArgs = FaceboxApiAxiosParamCreator(
        configuration
      ).checkImage(checkImageParamsBody, options);
      return (basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Compare multiple faceprints.
     * @summary compareFaceprint
     * @param {CompareFaceprintParamsBody} compareFaceprintParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    compareFaceprint(
      compareFaceprintParamsBody: CompareFaceprintParamsBody,
      options?: any
    ): (basePath?: string) => AxiosPromise<InlineResponse200> {
      const localVarAxiosArgs = FaceboxApiAxiosParamCreator(
        configuration
      ).compareFaceprint(compareFaceprintParamsBody, options);
      return (basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Get similar faces to a new or unknown face
     * @summary getSimilar
     * @param {GetSimilarParamsBody} getSimilarParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSimilar(
      getSimilarParamsBody: GetSimilarParamsBody,
      options?: any
    ): (basePath?: string) => AxiosPromise<GetSimilarBody> {
      const localVarAxiosArgs = FaceboxApiAxiosParamCreator(
        configuration
      ).getSimilar(getSimilarParamsBody, options);
      return (basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getSimilarById
     * @param {string} id
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSimilarById(
      id: string,
      limit?: number,
      options?: any
    ): (basePath?: string) => AxiosPromise<GetSimilarBody> {
      const localVarAxiosArgs = FaceboxApiAxiosParamCreator(
        configuration
      ).getSimilarById(id, limit, options);
      return (basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary rename
     * @param {string} id
     * @param {RenameParamsBody} renameParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rename(
      id: string,
      renameParamsBody: RenameParamsBody,
      options?: any
    ): (basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = FaceboxApiAxiosParamCreator(
        configuration
      ).rename(id, renameParamsBody, options);
      return (basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Teach facebox a face
     * @summary teach
     * @param {TeachFaceParamsBody} teachFaceParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teach(
      teachFaceParamsBody: TeachFaceParamsBody,
      options?: any
    ): (basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = FaceboxApiAxiosParamCreator(
        configuration
      ).teach(teachFaceParamsBody, options);
      return (basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * FaceboxApi - factory interface
 * @export
 */
export const FaceboxApiFactory = function(
  configuration?: Configuration,
  basePath?: string
) {
  return {
    /**
     * Use the /tagbox/check endpoint to get tags for a specified image.
     * @summary checkFaceprint
     * @param {CheckFaceprintParamsBody} checkFaceprintParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkFaceprint(
      checkFaceprintParamsBody: CheckFaceprintParamsBody,
      options?: any
    ) {
      return FaceboxApiFp(configuration).checkFaceprint(
        checkFaceprintParamsBody,
        options
      )(basePath);
    },
    /**
     * Use the /tagbox/check endpoint to get tags for a specified image.
     * @summary checkImage
     * @param {CheckImageParamsBody} checkImageParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkImage(checkImageParamsBody: CheckImageParamsBody, options?: any) {
      return FaceboxApiFp(configuration).checkImage(
        checkImageParamsBody,
        options
      )(basePath);
    },
    /**
     * Compare multiple faceprints.
     * @summary compareFaceprint
     * @param {CompareFaceprintParamsBody} compareFaceprintParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    compareFaceprint(
      compareFaceprintParamsBody: CompareFaceprintParamsBody,
      options?: any
    ) {
      return FaceboxApiFp(configuration).compareFaceprint(
        compareFaceprintParamsBody,
        options
      )(basePath);
    },
    /**
     * Get similar faces to a new or unknown face
     * @summary getSimilar
     * @param {GetSimilarParamsBody} getSimilarParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSimilar(getSimilarParamsBody: GetSimilarParamsBody, options?: any) {
      return FaceboxApiFp(configuration).getSimilar(
        getSimilarParamsBody,
        options
      )(basePath);
    },
    /**
     *
     * @summary getSimilarById
     * @param {string} id
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSimilarById(id: string, limit?: number, options?: any) {
      return FaceboxApiFp(configuration).getSimilarById(id, limit, options)(
        basePath
      );
    },
    /**
     *
     * @summary rename
     * @param {string} id
     * @param {RenameParamsBody} renameParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rename(id: string, renameParamsBody: RenameParamsBody, options?: any) {
      return FaceboxApiFp(configuration).rename(id, renameParamsBody, options)(
        basePath
      );
    },
    /**
     * Teach facebox a face
     * @summary teach
     * @param {TeachFaceParamsBody} teachFaceParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teach(teachFaceParamsBody: TeachFaceParamsBody, options?: any) {
      return FaceboxApiFp(configuration).teach(teachFaceParamsBody, options)(
        basePath
      );
    },
  };
};

/**
 * FaceboxApi - interface
 * @export
 * @interface FaceboxApi
 */
export interface FaceboxApiInterface {
  /**
   * Use the /tagbox/check endpoint to get tags for a specified image.
   * @summary checkFaceprint
   * @param {CheckFaceprintParamsBody} checkFaceprintParamsBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FaceboxApiInterface
   */
  checkFaceprint(
    checkFaceprintParamsBody: CheckFaceprintParamsBody,
    options?: any
  ): AxiosPromise<CheckFaceprintBody>;

  /**
   * Use the /tagbox/check endpoint to get tags for a specified image.
   * @summary checkImage
   * @param {CheckImageParamsBody} checkImageParamsBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FaceboxApiInterface
   */
  checkImage(
    checkImageParamsBody: CheckImageParamsBody,
    options?: any
  ): AxiosPromise<CheckImageBody>;

  /**
   * Compare multiple faceprints.
   * @summary compareFaceprint
   * @param {CompareFaceprintParamsBody} compareFaceprintParamsBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FaceboxApiInterface
   */
  compareFaceprint(
    compareFaceprintParamsBody: CompareFaceprintParamsBody,
    options?: any
  ): AxiosPromise<InlineResponse200>;

  /**
   * Get similar faces to a new or unknown face
   * @summary getSimilar
   * @param {GetSimilarParamsBody} getSimilarParamsBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FaceboxApiInterface
   */
  getSimilar(
    getSimilarParamsBody: GetSimilarParamsBody,
    options?: any
  ): AxiosPromise<GetSimilarBody>;

  /**
   *
   * @summary getSimilarById
   * @param {string} id
   * @param {number} [limit]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FaceboxApiInterface
   */
  getSimilarById(
    id: string,
    limit?: number,
    options?: any
  ): AxiosPromise<GetSimilarBody>;

  /**
   *
   * @summary rename
   * @param {string} id
   * @param {RenameParamsBody} renameParamsBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FaceboxApiInterface
   */
  rename(
    id: string,
    renameParamsBody: RenameParamsBody,
    options?: any
  ): AxiosPromise<{}>;

  /**
   * Teach facebox a face
   * @summary teach
   * @param {TeachFaceParamsBody} teachFaceParamsBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FaceboxApiInterface
   */
  teach(
    teachFaceParamsBody: TeachFaceParamsBody,
    options?: any
  ): AxiosPromise<{}>;
}

/**
 * FaceboxApi - object-oriented interface
 * @export
 * @class FaceboxApi
 * @extends {BaseAPI}
 */
export class FaceboxApi extends BaseAPI implements FaceboxApiInterface {
  /**
   * Use the /tagbox/check endpoint to get tags for a specified image.
   * @summary checkFaceprint
   * @param {CheckFaceprintParamsBody} checkFaceprintParamsBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FaceboxApi
   */
  public checkFaceprint(
    checkFaceprintParamsBody: CheckFaceprintParamsBody,
    options?: any
  ) {
    return FaceboxApiFp(this.configuration).checkFaceprint(
      checkFaceprintParamsBody,
      options
    )(this.basePath);
  }

  /**
   * Use the /tagbox/check endpoint to get tags for a specified image.
   * @summary checkImage
   * @param {CheckImageParamsBody} checkImageParamsBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FaceboxApi
   */
  public checkImage(checkImageParamsBody: CheckImageParamsBody, options?: any) {
    return FaceboxApiFp(this.configuration).checkImage(
      checkImageParamsBody,
      options
    )(this.basePath);
  }

  /**
   * Compare multiple faceprints.
   * @summary compareFaceprint
   * @param {CompareFaceprintParamsBody} compareFaceprintParamsBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FaceboxApi
   */
  public compareFaceprint(
    compareFaceprintParamsBody: CompareFaceprintParamsBody,
    options?: any
  ) {
    return FaceboxApiFp(this.configuration).compareFaceprint(
      compareFaceprintParamsBody,
      options
    )(this.basePath);
  }

  /**
   * Get similar faces to a new or unknown face
   * @summary getSimilar
   * @param {GetSimilarParamsBody} getSimilarParamsBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FaceboxApi
   */
  public getSimilar(getSimilarParamsBody: GetSimilarParamsBody, options?: any) {
    return FaceboxApiFp(this.configuration).getSimilar(
      getSimilarParamsBody,
      options
    )(this.basePath);
  }

  /**
   *
   * @summary getSimilarById
   * @param {string} id
   * @param {number} [limit]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FaceboxApi
   */
  public getSimilarById(id: string, limit?: number, options?: any) {
    return FaceboxApiFp(this.configuration).getSimilarById(id, limit, options)(
      this.basePath
    );
  }

  /**
   *
   * @summary rename
   * @param {string} id
   * @param {RenameParamsBody} renameParamsBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FaceboxApi
   */
  public rename(id: string, renameParamsBody: RenameParamsBody, options?: any) {
    return FaceboxApiFp(this.configuration).rename(
      id,
      renameParamsBody,
      options
    )(this.basePath);
  }

  /**
   * Teach facebox a face
   * @summary teach
   * @param {TeachFaceParamsBody} teachFaceParamsBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FaceboxApi
   */
  public teach(teachFaceParamsBody: TeachFaceParamsBody, options?: any) {
    return FaceboxApiFp(this.configuration).teach(teachFaceParamsBody, options)(
      this.basePath
    );
  }
}

/**
 * MetadataApi - axios parameter creator
 * @export
 */
export const MetadataApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     * Returns some basic details about the box.
     * @summary GetBoxInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBoxInfo(options: any = {}): RequestArgs {
      const localVarPath = `/info`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign(
        { method: 'GET' },
        baseOptions,
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      if (configuration && configuration.userAgent) {
        localVarHeaderParameter['User-Agent'] = configuration.userAgent;
      } else {
        localVarHeaderParameter['User-Agent'] = 'facebox-SDK/js/1.0.1';
      }
      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarHeaderParameter['Authorization'] =
          'Basic ' +
          btoa(configuration.username + ':' + configuration.password);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MetadataApi - functional programming interface
 * @export
 */
export const MetadataApiFp = function(configuration?: Configuration) {
  return {
    /**
     * Returns some basic details about the box.
     * @summary GetBoxInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBoxInfo(
      options?: any
    ): (basePath?: string) => AxiosPromise<GetBoxInfoOKBody> {
      const localVarAxiosArgs = MetadataApiAxiosParamCreator(
        configuration
      ).getBoxInfo(options);
      return (basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * MetadataApi - factory interface
 * @export
 */
export const MetadataApiFactory = function(
  configuration?: Configuration,
  basePath?: string
) {
  return {
    /**
     * Returns some basic details about the box.
     * @summary GetBoxInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBoxInfo(options?: any) {
      return MetadataApiFp(configuration).getBoxInfo(options)(basePath);
    },
  };
};

/**
 * MetadataApi - interface
 * @export
 * @interface MetadataApi
 */
export interface MetadataApiInterface {
  /**
   * Returns some basic details about the box.
   * @summary GetBoxInfo
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MetadataApiInterface
   */
  getBoxInfo(options?: any): AxiosPromise<GetBoxInfoOKBody>;
}

/**
 * MetadataApi - object-oriented interface
 * @export
 * @class MetadataApi
 * @extends {BaseAPI}
 */
export class MetadataApi extends BaseAPI implements MetadataApiInterface {
  /**
   * Returns some basic details about the box.
   * @summary GetBoxInfo
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MetadataApi
   */
  public getBoxInfo(options?: any) {
    return MetadataApiFp(this.configuration).getBoxInfo(options)(this.basePath);
  }
}
