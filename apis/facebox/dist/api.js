"use strict";
// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * !!GENERATED FILE!!
 *
 * WARNING:  Do not edit this file, changes will be overwritten.
 *
 * Facebox API
 * Facebox API descriptors (unofficial)
 *
 * @mbx/api-facebox v1.0.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
const url = require("url");
const axios_1 = require("axios");
const BASE_PATH = 'http://localhost:8080'.replace(/\/+$/, '');
/**
 *
 * @export
 */
exports.COLLECTION_FORMATS = {
    csv: ',',
    ssv: ' ',
    tsv: '\t',
    pipes: '|',
};
/**
 *
 * @export
 * @class BaseAPI
 */
class BaseAPI {
    constructor(configuration, basePath = BASE_PATH) {
        this.basePath = basePath;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}
exports.BaseAPI = BaseAPI;
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
class RequiredError extends Error {
    constructor(field, msg) {
        super(msg);
        this.field = field;
        this.name = 'RequiredError';
    }
}
exports.RequiredError = RequiredError;
/**
 * FaceboxApi - axios parameter creator
 * @export
 */
exports.FaceboxApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Use the /tagbox/check endpoint to get tags for a specified image.
         * @summary checkFaceprint
         * @param {CheckFaceprintParamsBody} checkFaceprintParamsBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkFaceprint(checkFaceprintParamsBody, options = {}) {
            // verify required parameter 'checkFaceprintParamsBody' is not null or undefined
            if (checkFaceprintParamsBody === null ||
                checkFaceprintParamsBody === undefined) {
                throw new RequiredError('checkFaceprintParamsBody', 'Required parameter checkFaceprintParamsBody was null or undefined when calling checkFaceprint.');
            }
            const localVarPath = `/facebox/faceprint/check`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (configuration && configuration.userAgent) {
                localVarHeaderParameter['User-Agent'] = configuration.userAgent;
            }
            else {
                localVarHeaderParameter['User-Agent'] = 'facebox-SDK/js/1.0.1';
            }
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter['Authorization'] =
                    'Basic ' +
                        btoa(configuration.username + ':' + configuration.password);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = 'CheckFaceprintParamsBody' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(checkFaceprintParamsBody || {})
                : checkFaceprintParamsBody || '';
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the /tagbox/check endpoint to get tags for a specified image.
         * @summary checkImage
         * @param {CheckImageParamsBody} checkImageParamsBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkImage(checkImageParamsBody, options = {}) {
            // verify required parameter 'checkImageParamsBody' is not null or undefined
            if (checkImageParamsBody === null || checkImageParamsBody === undefined) {
                throw new RequiredError('checkImageParamsBody', 'Required parameter checkImageParamsBody was null or undefined when calling checkImage.');
            }
            const localVarPath = `/facebox/check`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (configuration && configuration.userAgent) {
                localVarHeaderParameter['User-Agent'] = configuration.userAgent;
            }
            else {
                localVarHeaderParameter['User-Agent'] = 'facebox-SDK/js/1.0.1';
            }
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter['Authorization'] =
                    'Basic ' +
                        btoa(configuration.username + ':' + configuration.password);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = 'CheckImageParamsBody' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(checkImageParamsBody || {})
                : checkImageParamsBody || '';
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Compare multiple faceprints.
         * @summary compareFaceprint
         * @param {CompareFaceprintParamsBody} compareFaceprintParamsBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        compareFaceprint(compareFaceprintParamsBody, options = {}) {
            // verify required parameter 'compareFaceprintParamsBody' is not null or undefined
            if (compareFaceprintParamsBody === null ||
                compareFaceprintParamsBody === undefined) {
                throw new RequiredError('compareFaceprintParamsBody', 'Required parameter compareFaceprintParamsBody was null or undefined when calling compareFaceprint.');
            }
            const localVarPath = `/facebox/faceprint/compare`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (configuration && configuration.userAgent) {
                localVarHeaderParameter['User-Agent'] = configuration.userAgent;
            }
            else {
                localVarHeaderParameter['User-Agent'] = 'facebox-SDK/js/1.0.1';
            }
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter['Authorization'] =
                    'Basic ' +
                        btoa(configuration.username + ':' + configuration.password);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = 'CompareFaceprintParamsBody' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(compareFaceprintParamsBody || {})
                : compareFaceprintParamsBody || '';
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get similar faces to a new or unknown face
         * @summary getSimilar
         * @param {GetSimilarParamsBody} getSimilarParamsBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimilar(getSimilarParamsBody, options = {}) {
            // verify required parameter 'getSimilarParamsBody' is not null or undefined
            if (getSimilarParamsBody === null || getSimilarParamsBody === undefined) {
                throw new RequiredError('getSimilarParamsBody', 'Required parameter getSimilarParamsBody was null or undefined when calling getSimilar.');
            }
            const localVarPath = `/facebox/similars`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (configuration && configuration.userAgent) {
                localVarHeaderParameter['User-Agent'] = configuration.userAgent;
            }
            else {
                localVarHeaderParameter['User-Agent'] = 'facebox-SDK/js/1.0.1';
            }
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter['Authorization'] =
                    'Basic ' +
                        btoa(configuration.username + ':' + configuration.password);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = 'GetSimilarParamsBody' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(getSimilarParamsBody || {})
                : getSimilarParamsBody || '';
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary getSimilarById
         * @param {string} id
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimilarById(id, limit, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling getSimilarById.');
            }
            const localVarPath = `/facebox/similar?id={id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (configuration && configuration.userAgent) {
                localVarHeaderParameter['User-Agent'] = configuration.userAgent;
            }
            else {
                localVarHeaderParameter['User-Agent'] = 'facebox-SDK/js/1.0.1';
            }
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter['Authorization'] =
                    'Basic ' +
                        btoa(configuration.username + ':' + configuration.password);
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary rename
         * @param {string} id
         * @param {RenameParamsBody} renameParamsBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rename(id, renameParamsBody, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling rename.');
            }
            // verify required parameter 'renameParamsBody' is not null or undefined
            if (renameParamsBody === null || renameParamsBody === undefined) {
                throw new RequiredError('renameParamsBody', 'Required parameter renameParamsBody was null or undefined when calling rename.');
            }
            const localVarPath = `/facebox/teach/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (configuration && configuration.userAgent) {
                localVarHeaderParameter['User-Agent'] = configuration.userAgent;
            }
            else {
                localVarHeaderParameter['User-Agent'] = 'facebox-SDK/js/1.0.1';
            }
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter['Authorization'] =
                    'Basic ' +
                        btoa(configuration.username + ':' + configuration.password);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = 'RenameParamsBody' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(renameParamsBody || {})
                : renameParamsBody || '';
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Teach facebox a face
         * @summary teach
         * @param {TeachFaceParamsBody} teachFaceParamsBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teach(teachFaceParamsBody, options = {}) {
            // verify required parameter 'teachFaceParamsBody' is not null or undefined
            if (teachFaceParamsBody === null || teachFaceParamsBody === undefined) {
                throw new RequiredError('teachFaceParamsBody', 'Required parameter teachFaceParamsBody was null or undefined when calling teach.');
            }
            const localVarPath = `/facebox/teach`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (configuration && configuration.userAgent) {
                localVarHeaderParameter['User-Agent'] = configuration.userAgent;
            }
            else {
                localVarHeaderParameter['User-Agent'] = 'facebox-SDK/js/1.0.1';
            }
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter['Authorization'] =
                    'Basic ' +
                        btoa(configuration.username + ':' + configuration.password);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = 'TeachFaceParamsBody' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(teachFaceParamsBody || {})
                : teachFaceParamsBody || '';
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * FaceboxApi - functional programming interface
 * @export
 */
exports.FaceboxApiFp = function (configuration) {
    return {
        /**
         * Use the /tagbox/check endpoint to get tags for a specified image.
         * @summary checkFaceprint
         * @param {CheckFaceprintParamsBody} checkFaceprintParamsBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkFaceprint(checkFaceprintParamsBody, options) {
            const localVarAxiosArgs = exports.FaceboxApiAxiosParamCreator(configuration).checkFaceprint(checkFaceprintParamsBody, options);
            return (basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
                    url: basePath + localVarAxiosArgs.url,
                });
                return axios_1.default.request(axiosRequestArgs);
            };
        },
        /**
         * Use the /tagbox/check endpoint to get tags for a specified image.
         * @summary checkImage
         * @param {CheckImageParamsBody} checkImageParamsBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkImage(checkImageParamsBody, options) {
            const localVarAxiosArgs = exports.FaceboxApiAxiosParamCreator(configuration).checkImage(checkImageParamsBody, options);
            return (basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
                    url: basePath + localVarAxiosArgs.url,
                });
                return axios_1.default.request(axiosRequestArgs);
            };
        },
        /**
         * Compare multiple faceprints.
         * @summary compareFaceprint
         * @param {CompareFaceprintParamsBody} compareFaceprintParamsBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        compareFaceprint(compareFaceprintParamsBody, options) {
            const localVarAxiosArgs = exports.FaceboxApiAxiosParamCreator(configuration).compareFaceprint(compareFaceprintParamsBody, options);
            return (basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
                    url: basePath + localVarAxiosArgs.url,
                });
                return axios_1.default.request(axiosRequestArgs);
            };
        },
        /**
         * Get similar faces to a new or unknown face
         * @summary getSimilar
         * @param {GetSimilarParamsBody} getSimilarParamsBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimilar(getSimilarParamsBody, options) {
            const localVarAxiosArgs = exports.FaceboxApiAxiosParamCreator(configuration).getSimilar(getSimilarParamsBody, options);
            return (basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
                    url: basePath + localVarAxiosArgs.url,
                });
                return axios_1.default.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getSimilarById
         * @param {string} id
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimilarById(id, limit, options) {
            const localVarAxiosArgs = exports.FaceboxApiAxiosParamCreator(configuration).getSimilarById(id, limit, options);
            return (basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
                    url: basePath + localVarAxiosArgs.url,
                });
                return axios_1.default.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary rename
         * @param {string} id
         * @param {RenameParamsBody} renameParamsBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rename(id, renameParamsBody, options) {
            const localVarAxiosArgs = exports.FaceboxApiAxiosParamCreator(configuration).rename(id, renameParamsBody, options);
            return (basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
                    url: basePath + localVarAxiosArgs.url,
                });
                return axios_1.default.request(axiosRequestArgs);
            };
        },
        /**
         * Teach facebox a face
         * @summary teach
         * @param {TeachFaceParamsBody} teachFaceParamsBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teach(teachFaceParamsBody, options) {
            const localVarAxiosArgs = exports.FaceboxApiAxiosParamCreator(configuration).teach(teachFaceParamsBody, options);
            return (basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
                    url: basePath + localVarAxiosArgs.url,
                });
                return axios_1.default.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * FaceboxApi - factory interface
 * @export
 */
exports.FaceboxApiFactory = function (configuration, basePath) {
    return {
        /**
         * Use the /tagbox/check endpoint to get tags for a specified image.
         * @summary checkFaceprint
         * @param {CheckFaceprintParamsBody} checkFaceprintParamsBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkFaceprint(checkFaceprintParamsBody, options) {
            return exports.FaceboxApiFp(configuration).checkFaceprint(checkFaceprintParamsBody, options)(basePath);
        },
        /**
         * Use the /tagbox/check endpoint to get tags for a specified image.
         * @summary checkImage
         * @param {CheckImageParamsBody} checkImageParamsBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkImage(checkImageParamsBody, options) {
            return exports.FaceboxApiFp(configuration).checkImage(checkImageParamsBody, options)(basePath);
        },
        /**
         * Compare multiple faceprints.
         * @summary compareFaceprint
         * @param {CompareFaceprintParamsBody} compareFaceprintParamsBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        compareFaceprint(compareFaceprintParamsBody, options) {
            return exports.FaceboxApiFp(configuration).compareFaceprint(compareFaceprintParamsBody, options)(basePath);
        },
        /**
         * Get similar faces to a new or unknown face
         * @summary getSimilar
         * @param {GetSimilarParamsBody} getSimilarParamsBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimilar(getSimilarParamsBody, options) {
            return exports.FaceboxApiFp(configuration).getSimilar(getSimilarParamsBody, options)(basePath);
        },
        /**
         *
         * @summary getSimilarById
         * @param {string} id
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimilarById(id, limit, options) {
            return exports.FaceboxApiFp(configuration).getSimilarById(id, limit, options)(basePath);
        },
        /**
         *
         * @summary rename
         * @param {string} id
         * @param {RenameParamsBody} renameParamsBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rename(id, renameParamsBody, options) {
            return exports.FaceboxApiFp(configuration).rename(id, renameParamsBody, options)(basePath);
        },
        /**
         * Teach facebox a face
         * @summary teach
         * @param {TeachFaceParamsBody} teachFaceParamsBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teach(teachFaceParamsBody, options) {
            return exports.FaceboxApiFp(configuration).teach(teachFaceParamsBody, options)(basePath);
        },
    };
};
/**
 * FaceboxApi - object-oriented interface
 * @export
 * @class FaceboxApi
 * @extends {BaseAPI}
 */
class FaceboxApi extends BaseAPI {
    /**
     * Use the /tagbox/check endpoint to get tags for a specified image.
     * @summary checkFaceprint
     * @param {CheckFaceprintParamsBody} checkFaceprintParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceboxApi
     */
    checkFaceprint(checkFaceprintParamsBody, options) {
        return exports.FaceboxApiFp(this.configuration).checkFaceprint(checkFaceprintParamsBody, options)(this.basePath);
    }
    /**
     * Use the /tagbox/check endpoint to get tags for a specified image.
     * @summary checkImage
     * @param {CheckImageParamsBody} checkImageParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceboxApi
     */
    checkImage(checkImageParamsBody, options) {
        return exports.FaceboxApiFp(this.configuration).checkImage(checkImageParamsBody, options)(this.basePath);
    }
    /**
     * Compare multiple faceprints.
     * @summary compareFaceprint
     * @param {CompareFaceprintParamsBody} compareFaceprintParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceboxApi
     */
    compareFaceprint(compareFaceprintParamsBody, options) {
        return exports.FaceboxApiFp(this.configuration).compareFaceprint(compareFaceprintParamsBody, options)(this.basePath);
    }
    /**
     * Get similar faces to a new or unknown face
     * @summary getSimilar
     * @param {GetSimilarParamsBody} getSimilarParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceboxApi
     */
    getSimilar(getSimilarParamsBody, options) {
        return exports.FaceboxApiFp(this.configuration).getSimilar(getSimilarParamsBody, options)(this.basePath);
    }
    /**
     *
     * @summary getSimilarById
     * @param {string} id
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceboxApi
     */
    getSimilarById(id, limit, options) {
        return exports.FaceboxApiFp(this.configuration).getSimilarById(id, limit, options)(this.basePath);
    }
    /**
     *
     * @summary rename
     * @param {string} id
     * @param {RenameParamsBody} renameParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceboxApi
     */
    rename(id, renameParamsBody, options) {
        return exports.FaceboxApiFp(this.configuration).rename(id, renameParamsBody, options)(this.basePath);
    }
    /**
     * Teach facebox a face
     * @summary teach
     * @param {TeachFaceParamsBody} teachFaceParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceboxApi
     */
    teach(teachFaceParamsBody, options) {
        return exports.FaceboxApiFp(this.configuration).teach(teachFaceParamsBody, options)(this.basePath);
    }
}
exports.FaceboxApi = FaceboxApi;
/**
 * MetadataApi - axios parameter creator
 * @export
 */
exports.MetadataApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Returns some basic details about the box.
         * @summary GetBoxInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoxInfo(options = {}) {
            const localVarPath = `/info`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (configuration && configuration.userAgent) {
                localVarHeaderParameter['User-Agent'] = configuration.userAgent;
            }
            else {
                localVarHeaderParameter['User-Agent'] = 'facebox-SDK/js/1.0.1';
            }
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter['Authorization'] =
                    'Basic ' +
                        btoa(configuration.username + ':' + configuration.password);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * MetadataApi - functional programming interface
 * @export
 */
exports.MetadataApiFp = function (configuration) {
    return {
        /**
         * Returns some basic details about the box.
         * @summary GetBoxInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoxInfo(options) {
            const localVarAxiosArgs = exports.MetadataApiAxiosParamCreator(configuration).getBoxInfo(options);
            return (basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
                    url: basePath + localVarAxiosArgs.url,
                });
                return axios_1.default.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * MetadataApi - factory interface
 * @export
 */
exports.MetadataApiFactory = function (configuration, basePath) {
    return {
        /**
         * Returns some basic details about the box.
         * @summary GetBoxInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoxInfo(options) {
            return exports.MetadataApiFp(configuration).getBoxInfo(options)(basePath);
        },
    };
};
/**
 * MetadataApi - object-oriented interface
 * @export
 * @class MetadataApi
 * @extends {BaseAPI}
 */
class MetadataApi extends BaseAPI {
    /**
     * Returns some basic details about the box.
     * @summary GetBoxInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    getBoxInfo(options) {
        return exports.MetadataApiFp(this.configuration).getBoxInfo(options)(this.basePath);
    }
}
exports.MetadataApi = MetadataApi;
