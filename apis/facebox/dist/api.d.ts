/**
 * !!GENERATED FILE!!
 *
 * WARNING:  Do not edit this file, changes will be overwritten.
 *
 * Facebox API
 * Facebox API descriptors (unofficial)
 *
 * @mbx/api-facebox v1.0.0
 */
/// <reference path="../custom.d.ts" />
import { Configuration } from './configuration';
import { AxiosPromise } from 'axios';
/**
 *
 * @export
 */
export declare const COLLECTION_FORMATS: {
    csv: string;
    ssv: string;
    tsv: string;
    pipes: string;
};
/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: any;
}
/**
 *
 * @export
 * @class BaseAPI
 */
export declare class BaseAPI {
    protected basePath: string;
    protected configuration: Configuration | undefined;
    constructor(configuration?: Configuration, basePath?: string);
}
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export declare class RequiredError extends Error {
    field: string;
    name: 'RequiredError';
    constructor(field: string, msg?: string);
}
/**
 *
 * @export
 * @interface APIError
 */
export interface APIError {
    /**
     *
     * @type {boolean}
     * @memberof APIError
     */
    success?: boolean;
    /**
     *
     * @type {string}
     * @memberof APIError
     */
    error?: string;
}
/**
 *
 * @export
 * @interface CheckFaceprintBody
 */
export interface CheckFaceprintBody {
    /**
     *
     * @type {Array<CheckFaceprintBodyFaceprintsItems>}
     * @memberof CheckFaceprintBody
     */
    faceprints?: Array<CheckFaceprintBodyFaceprintsItems>;
    /**
     *
     * @type {boolean}
     * @memberof CheckFaceprintBody
     */
    success?: boolean;
}
/**
 *
 * @export
 * @interface CheckFaceprintBodyFaceprintsItems
 */
export interface CheckFaceprintBodyFaceprintsItems {
    /**
     *
     * @type {number}
     * @memberof CheckFaceprintBodyFaceprintsItems
     */
    confidence?: number;
    /**
     *
     * @type {string}
     * @memberof CheckFaceprintBodyFaceprintsItems
     */
    id?: string;
    /**
     *
     * @type {boolean}
     * @memberof CheckFaceprintBodyFaceprintsItems
     */
    matched?: boolean;
    /**
     *
     * @type {string}
     * @memberof CheckFaceprintBodyFaceprintsItems
     */
    name?: string;
}
/**
 *
 * @export
 * @interface CheckFaceprintParamsBody
 */
export interface CheckFaceprintParamsBody {
    /**
     *
     * @type {Array<string>}
     * @memberof CheckFaceprintParamsBody
     */
    faceprints: Array<string>;
}
/**
 *
 * @export
 * @interface CheckImageBody
 */
export interface CheckImageBody {
    /**
     *
     * @type {Array<Face>}
     * @memberof CheckImageBody
     */
    faces: Array<Face>;
    /**
     *
     * @type {number}
     * @memberof CheckImageBody
     */
    facesCount: number;
    /**
     *
     * @type {boolean}
     * @memberof CheckImageBody
     */
    success: boolean;
}
/**
 *
 * @export
 * @interface CheckImageParamsBody
 */
export interface CheckImageParamsBody {
    /**
     *
     * @type {string}
     * @memberof CheckImageParamsBody
     */
    base64?: string;
    /**
     *
     * @type {boolean}
     * @memberof CheckImageParamsBody
     */
    faceprint?: boolean;
    /**
     * URL to image
     * @type {string}
     * @memberof CheckImageParamsBody
     */
    url?: string;
}
/**
 *
 * @export
 * @interface CompareFaceprintParamsBody
 */
export interface CompareFaceprintParamsBody {
    /**
     *
     * @type {Array<string>}
     * @memberof CompareFaceprintParamsBody
     */
    faceprints: Array<string>;
    /**
     *
     * @type {string}
     * @memberof CompareFaceprintParamsBody
     */
    target: string;
}
/**
 *
 * @export
 * @interface Face
 */
export interface Face {
    /**
     *
     * @type {number}
     * @memberof Face
     */
    confidence: number;
    /**
     *
     * @type {string}
     * @memberof Face
     */
    faceprint: string;
    /**
     *
     * @type {string}
     * @memberof Face
     */
    id: string;
    /**
     *
     * @type {boolean}
     * @memberof Face
     */
    matched: boolean;
    /**
     *
     * @type {string}
     * @memberof Face
     */
    name: string;
    /**
     *
     * @type {Rect}
     * @memberof Face
     */
    rect: Rect;
}
/**
 *
 * @export
 * @interface GetBoxInfoOKBody
 */
export interface GetBoxInfoOKBody {
    /**
     *
     * @type {string}
     * @memberof GetBoxInfoOKBody
     */
    build?: string;
    /**
     *
     * @type {string}
     * @memberof GetBoxInfoOKBody
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof GetBoxInfoOKBody
     */
    plan?: string;
    /**
     *
     * @type {string}
     * @memberof GetBoxInfoOKBody
     */
    status?: string;
    /**
     *
     * @type {boolean}
     * @memberof GetBoxInfoOKBody
     */
    success?: boolean;
    /**
     *
     * @type {number}
     * @memberof GetBoxInfoOKBody
     */
    version?: number;
}
/**
 *
 * @export
 * @interface GetSimilarBody
 */
export interface GetSimilarBody {
    /**
     *
     * @type {Array<SimilarFace>}
     * @memberof GetSimilarBody
     */
    faces: Array<SimilarFace>;
    /**
     *
     * @type {boolean}
     * @memberof GetSimilarBody
     */
    success?: boolean;
}
/**
 *
 * @export
 * @interface GetSimilarParamsBody
 */
export interface GetSimilarParamsBody {
    /**
     *
     * @type {string}
     * @memberof GetSimilarParamsBody
     */
    base64?: string;
    /**
     *
     * @type {string}
     * @memberof GetSimilarParamsBody
     */
    url?: string;
}
/**
 *
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     *
     * @type {boolean}
     * @memberof InlineResponse200
     */
    success?: boolean;
    /**
     *
     * @type {Array<number>}
     * @memberof InlineResponse200
     */
    confidences?: Array<number>;
}
/**
 *
 * @export
 * @interface Rect
 */
export interface Rect {
    /**
     *
     * @type {number}
     * @memberof Rect
     */
    height: number;
    /**
     *
     * @type {number}
     * @memberof Rect
     */
    left: number;
    /**
     *
     * @type {number}
     * @memberof Rect
     */
    top: number;
    /**
     *
     * @type {number}
     * @memberof Rect
     */
    width: number;
}
/**
 *
 * @export
 * @interface RenameParamsBody
 */
export interface RenameParamsBody {
    /**
     *
     * @type {string}
     * @memberof RenameParamsBody
     */
    name: string;
}
/**
 *
 * @export
 * @interface Similar
 */
export interface Similar {
    /**
     *
     * @type {number}
     * @memberof Similar
     */
    confidence: number;
    /**
     *
     * @type {string}
     * @memberof Similar
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof Similar
     */
    name: string;
}
/**
 *
 * @export
 * @interface SimilarFace
 */
export interface SimilarFace {
    /**
     *
     * @type {Rect}
     * @memberof SimilarFace
     */
    rect: Rect;
    /**
     *
     * @type {Array<Similar>}
     * @memberof SimilarFace
     */
    similarFaces: Array<Similar>;
}
/**
 *
 * @export
 * @interface SuccessfulAPIResponse
 */
export interface SuccessfulAPIResponse {
    /**
     *
     * @type {boolean}
     * @memberof SuccessfulAPIResponse
     */
    successs?: boolean;
}
/**
 *
 * @export
 * @interface TeachFaceParamsBody
 */
export interface TeachFaceParamsBody {
    /**
     *
     * @type {string}
     * @memberof TeachFaceParamsBody
     */
    base64?: string;
    /**
     *
     * @type {string}
     * @memberof TeachFaceParamsBody
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof TeachFaceParamsBody
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof TeachFaceParamsBody
     */
    url?: string;
}
/**
 * FaceboxApi - axios parameter creator
 * @export
 */
export declare const FaceboxApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Use the /tagbox/check endpoint to get tags for a specified image.
     * @summary checkFaceprint
     * @param {CheckFaceprintParamsBody} checkFaceprintParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkFaceprint(checkFaceprintParamsBody: CheckFaceprintParamsBody, options?: any): RequestArgs;
    /**
     * Use the /tagbox/check endpoint to get tags for a specified image.
     * @summary checkImage
     * @param {CheckImageParamsBody} checkImageParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkImage(checkImageParamsBody: CheckImageParamsBody, options?: any): RequestArgs;
    /**
     * Compare multiple faceprints.
     * @summary compareFaceprint
     * @param {CompareFaceprintParamsBody} compareFaceprintParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    compareFaceprint(compareFaceprintParamsBody: CompareFaceprintParamsBody, options?: any): RequestArgs;
    /**
     * Get similar faces to a new or unknown face
     * @summary getSimilar
     * @param {GetSimilarParamsBody} getSimilarParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSimilar(getSimilarParamsBody: GetSimilarParamsBody, options?: any): RequestArgs;
    /**
     *
     * @summary getSimilarById
     * @param {string} id
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSimilarById(id: string, limit?: number, options?: any): RequestArgs;
    /**
     *
     * @summary rename
     * @param {string} id
     * @param {RenameParamsBody} renameParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rename(id: string, renameParamsBody: RenameParamsBody, options?: any): RequestArgs;
    /**
     * Teach facebox a face
     * @summary teach
     * @param {TeachFaceParamsBody} teachFaceParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teach(teachFaceParamsBody: TeachFaceParamsBody, options?: any): RequestArgs;
};
/**
 * FaceboxApi - functional programming interface
 * @export
 */
export declare const FaceboxApiFp: (configuration?: Configuration) => {
    /**
     * Use the /tagbox/check endpoint to get tags for a specified image.
     * @summary checkFaceprint
     * @param {CheckFaceprintParamsBody} checkFaceprintParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkFaceprint(checkFaceprintParamsBody: CheckFaceprintParamsBody, options?: any): (basePath?: string) => AxiosPromise<CheckFaceprintBody>;
    /**
     * Use the /tagbox/check endpoint to get tags for a specified image.
     * @summary checkImage
     * @param {CheckImageParamsBody} checkImageParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkImage(checkImageParamsBody: CheckImageParamsBody, options?: any): (basePath?: string) => AxiosPromise<CheckImageBody>;
    /**
     * Compare multiple faceprints.
     * @summary compareFaceprint
     * @param {CompareFaceprintParamsBody} compareFaceprintParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    compareFaceprint(compareFaceprintParamsBody: CompareFaceprintParamsBody, options?: any): (basePath?: string) => AxiosPromise<InlineResponse200>;
    /**
     * Get similar faces to a new or unknown face
     * @summary getSimilar
     * @param {GetSimilarParamsBody} getSimilarParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSimilar(getSimilarParamsBody: GetSimilarParamsBody, options?: any): (basePath?: string) => AxiosPromise<GetSimilarBody>;
    /**
     *
     * @summary getSimilarById
     * @param {string} id
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSimilarById(id: string, limit?: number, options?: any): (basePath?: string) => AxiosPromise<GetSimilarBody>;
    /**
     *
     * @summary rename
     * @param {string} id
     * @param {RenameParamsBody} renameParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rename(id: string, renameParamsBody: RenameParamsBody, options?: any): (basePath?: string) => AxiosPromise<Response>;
    /**
     * Teach facebox a face
     * @summary teach
     * @param {TeachFaceParamsBody} teachFaceParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teach(teachFaceParamsBody: TeachFaceParamsBody, options?: any): (basePath?: string) => AxiosPromise<Response>;
};
/**
 * FaceboxApi - factory interface
 * @export
 */
export declare const FaceboxApiFactory: (configuration?: Configuration, basePath?: string) => {
    /**
     * Use the /tagbox/check endpoint to get tags for a specified image.
     * @summary checkFaceprint
     * @param {CheckFaceprintParamsBody} checkFaceprintParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkFaceprint(checkFaceprintParamsBody: CheckFaceprintParamsBody, options?: any): AxiosPromise<CheckFaceprintBody>;
    /**
     * Use the /tagbox/check endpoint to get tags for a specified image.
     * @summary checkImage
     * @param {CheckImageParamsBody} checkImageParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkImage(checkImageParamsBody: CheckImageParamsBody, options?: any): AxiosPromise<CheckImageBody>;
    /**
     * Compare multiple faceprints.
     * @summary compareFaceprint
     * @param {CompareFaceprintParamsBody} compareFaceprintParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    compareFaceprint(compareFaceprintParamsBody: CompareFaceprintParamsBody, options?: any): AxiosPromise<InlineResponse200>;
    /**
     * Get similar faces to a new or unknown face
     * @summary getSimilar
     * @param {GetSimilarParamsBody} getSimilarParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSimilar(getSimilarParamsBody: GetSimilarParamsBody, options?: any): AxiosPromise<GetSimilarBody>;
    /**
     *
     * @summary getSimilarById
     * @param {string} id
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSimilarById(id: string, limit?: number, options?: any): AxiosPromise<GetSimilarBody>;
    /**
     *
     * @summary rename
     * @param {string} id
     * @param {RenameParamsBody} renameParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rename(id: string, renameParamsBody: RenameParamsBody, options?: any): AxiosPromise<Response>;
    /**
     * Teach facebox a face
     * @summary teach
     * @param {TeachFaceParamsBody} teachFaceParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teach(teachFaceParamsBody: TeachFaceParamsBody, options?: any): AxiosPromise<Response>;
};
/**
 * FaceboxApi - interface
 * @export
 * @interface FaceboxApi
 */
export interface FaceboxApiInterface {
    /**
     * Use the /tagbox/check endpoint to get tags for a specified image.
     * @summary checkFaceprint
     * @param {CheckFaceprintParamsBody} checkFaceprintParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceboxApiInterface
     */
    checkFaceprint(checkFaceprintParamsBody: CheckFaceprintParamsBody, options?: any): AxiosPromise<CheckFaceprintBody>;
    /**
     * Use the /tagbox/check endpoint to get tags for a specified image.
     * @summary checkImage
     * @param {CheckImageParamsBody} checkImageParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceboxApiInterface
     */
    checkImage(checkImageParamsBody: CheckImageParamsBody, options?: any): AxiosPromise<CheckImageBody>;
    /**
     * Compare multiple faceprints.
     * @summary compareFaceprint
     * @param {CompareFaceprintParamsBody} compareFaceprintParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceboxApiInterface
     */
    compareFaceprint(compareFaceprintParamsBody: CompareFaceprintParamsBody, options?: any): AxiosPromise<InlineResponse200>;
    /**
     * Get similar faces to a new or unknown face
     * @summary getSimilar
     * @param {GetSimilarParamsBody} getSimilarParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceboxApiInterface
     */
    getSimilar(getSimilarParamsBody: GetSimilarParamsBody, options?: any): AxiosPromise<GetSimilarBody>;
    /**
     *
     * @summary getSimilarById
     * @param {string} id
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceboxApiInterface
     */
    getSimilarById(id: string, limit?: number, options?: any): AxiosPromise<GetSimilarBody>;
    /**
     *
     * @summary rename
     * @param {string} id
     * @param {RenameParamsBody} renameParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceboxApiInterface
     */
    rename(id: string, renameParamsBody: RenameParamsBody, options?: any): AxiosPromise<{}>;
    /**
     * Teach facebox a face
     * @summary teach
     * @param {TeachFaceParamsBody} teachFaceParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceboxApiInterface
     */
    teach(teachFaceParamsBody: TeachFaceParamsBody, options?: any): AxiosPromise<{}>;
}
/**
 * FaceboxApi - object-oriented interface
 * @export
 * @class FaceboxApi
 * @extends {BaseAPI}
 */
export declare class FaceboxApi extends BaseAPI implements FaceboxApiInterface {
    /**
     * Use the /tagbox/check endpoint to get tags for a specified image.
     * @summary checkFaceprint
     * @param {CheckFaceprintParamsBody} checkFaceprintParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceboxApi
     */
    checkFaceprint(checkFaceprintParamsBody: CheckFaceprintParamsBody, options?: any): AxiosPromise<CheckFaceprintBody>;
    /**
     * Use the /tagbox/check endpoint to get tags for a specified image.
     * @summary checkImage
     * @param {CheckImageParamsBody} checkImageParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceboxApi
     */
    checkImage(checkImageParamsBody: CheckImageParamsBody, options?: any): AxiosPromise<CheckImageBody>;
    /**
     * Compare multiple faceprints.
     * @summary compareFaceprint
     * @param {CompareFaceprintParamsBody} compareFaceprintParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceboxApi
     */
    compareFaceprint(compareFaceprintParamsBody: CompareFaceprintParamsBody, options?: any): AxiosPromise<InlineResponse200>;
    /**
     * Get similar faces to a new or unknown face
     * @summary getSimilar
     * @param {GetSimilarParamsBody} getSimilarParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceboxApi
     */
    getSimilar(getSimilarParamsBody: GetSimilarParamsBody, options?: any): AxiosPromise<GetSimilarBody>;
    /**
     *
     * @summary getSimilarById
     * @param {string} id
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceboxApi
     */
    getSimilarById(id: string, limit?: number, options?: any): AxiosPromise<GetSimilarBody>;
    /**
     *
     * @summary rename
     * @param {string} id
     * @param {RenameParamsBody} renameParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceboxApi
     */
    rename(id: string, renameParamsBody: RenameParamsBody, options?: any): AxiosPromise<Response>;
    /**
     * Teach facebox a face
     * @summary teach
     * @param {TeachFaceParamsBody} teachFaceParamsBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceboxApi
     */
    teach(teachFaceParamsBody: TeachFaceParamsBody, options?: any): AxiosPromise<Response>;
}
/**
 * MetadataApi - axios parameter creator
 * @export
 */
export declare const MetadataApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Returns some basic details about the box.
     * @summary GetBoxInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBoxInfo(options?: any): RequestArgs;
};
/**
 * MetadataApi - functional programming interface
 * @export
 */
export declare const MetadataApiFp: (configuration?: Configuration) => {
    /**
     * Returns some basic details about the box.
     * @summary GetBoxInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBoxInfo(options?: any): (basePath?: string) => AxiosPromise<GetBoxInfoOKBody>;
};
/**
 * MetadataApi - factory interface
 * @export
 */
export declare const MetadataApiFactory: (configuration?: Configuration, basePath?: string) => {
    /**
     * Returns some basic details about the box.
     * @summary GetBoxInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBoxInfo(options?: any): AxiosPromise<GetBoxInfoOKBody>;
};
/**
 * MetadataApi - interface
 * @export
 * @interface MetadataApi
 */
export interface MetadataApiInterface {
    /**
     * Returns some basic details about the box.
     * @summary GetBoxInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApiInterface
     */
    getBoxInfo(options?: any): AxiosPromise<GetBoxInfoOKBody>;
}
/**
 * MetadataApi - object-oriented interface
 * @export
 * @class MetadataApi
 * @extends {BaseAPI}
 */
export declare class MetadataApi extends BaseAPI implements MetadataApiInterface {
    /**
     * Returns some basic details about the box.
     * @summary GetBoxInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    getBoxInfo(options?: any): AxiosPromise<GetBoxInfoOKBody>;
}
