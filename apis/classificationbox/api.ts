// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * !!GENERATED FILE!!
 *
 * WARNING:  Do not edit this file, changes will be overwritten.
 *
 * Classificationbox
 * ClassificationBox API descriptors (unofficial)
 *
 * @mbx/api-classificationbox v1.0.0
 */

import * as url from 'url';
import { Configuration } from './configuration';
import axios, { AxiosPromise } from 'axios';

const BASE_PATH = 'http://localhost:8080'.replace(/\/+$/, '');

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
  csv: ',',
  ssv: ' ',
  tsv: '\t',
  pipes: '|',
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
  url: string;
  options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
  protected configuration: Configuration | undefined;

  constructor(
    configuration?: Configuration,
    protected basePath: string = BASE_PATH
  ) {
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
  }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
  name: 'RequiredError' = 'RequiredError';
  constructor(public field: string, msg?: string) {
    super(msg);
  }
}

/**
 *
 * @export
 * @interface APIError
 */
export interface APIError {
  /**
   *
   * @type {boolean}
   * @memberof APIError
   */
  success?: boolean;
  /**
   *
   * @type {string}
   * @memberof APIError
   */
  error?: string;
}

/**
 *
 * @export
 * @interface GetBoxInfoOKBody
 */
export interface GetBoxInfoOKBody {
  /**
   *
   * @type {string}
   * @memberof GetBoxInfoOKBody
   */
  build?: string;
  /**
   *
   * @type {string}
   * @memberof GetBoxInfoOKBody
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof GetBoxInfoOKBody
   */
  plan?: string;
  /**
   *
   * @type {string}
   * @memberof GetBoxInfoOKBody
   */
  status?: string;
  /**
   *
   * @type {boolean}
   * @memberof GetBoxInfoOKBody
   */
  success?: boolean;
  /**
   *
   * @type {number}
   * @memberof GetBoxInfoOKBody
   */
  version?: number;
}

/**
 *
 * @export
 * @interface SuccessfulAPIResponse
 */
export interface SuccessfulAPIResponse {
  /**
   *
   * @type {boolean}
   * @memberof SuccessfulAPIResponse
   */
  successs?: boolean;
}

/**
 * MetadataApi - axios parameter creator
 * @export
 */
export const MetadataApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     * Returns some basic details about the box.
     * @summary GetBoxInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBoxInfo(options: any = {}): RequestArgs {
      const localVarPath = `/info`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign(
        { method: 'GET' },
        baseOptions,
        options
      );
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      if (configuration && configuration.userAgent) {
        localVarHeaderParameter['User-Agent'] = configuration.userAgent;
      } else {
        localVarHeaderParameter['User-Agent'] =
          'classificationbox-SDK/js/1.0.1';
      }
      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarHeaderParameter['Authorization'] =
          'Basic ' +
          btoa(configuration.username + ':' + configuration.password);
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MetadataApi - functional programming interface
 * @export
 */
export const MetadataApiFp = function(configuration?: Configuration) {
  return {
    /**
     * Returns some basic details about the box.
     * @summary GetBoxInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBoxInfo(
      options?: any
    ): (basePath?: string) => AxiosPromise<GetBoxInfoOKBody> {
      const localVarAxiosArgs = MetadataApiAxiosParamCreator(
        configuration
      ).getBoxInfo(options);
      return (basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * MetadataApi - factory interface
 * @export
 */
export const MetadataApiFactory = function(
  configuration?: Configuration,
  basePath?: string
) {
  return {
    /**
     * Returns some basic details about the box.
     * @summary GetBoxInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBoxInfo(options?: any) {
      return MetadataApiFp(configuration).getBoxInfo(options)(basePath);
    },
  };
};

/**
 * MetadataApi - interface
 * @export
 * @interface MetadataApi
 */
export interface MetadataApiInterface {
  /**
   * Returns some basic details about the box.
   * @summary GetBoxInfo
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MetadataApiInterface
   */
  getBoxInfo(options?: any): AxiosPromise<GetBoxInfoOKBody>;
}

/**
 * MetadataApi - object-oriented interface
 * @export
 * @class MetadataApi
 * @extends {BaseAPI}
 */
export class MetadataApi extends BaseAPI implements MetadataApiInterface {
  /**
   * Returns some basic details about the box.
   * @summary GetBoxInfo
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MetadataApi
   */
  public getBoxInfo(options?: any) {
    return MetadataApiFp(this.configuration).getBoxInfo(options)(this.basePath);
  }
}
