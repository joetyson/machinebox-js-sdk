"use strict";
// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * !!GENERATED FILE!!
 *
 * WARNING:  Do not edit this file, changes will be overwritten.
 *
 * Classificationbox
 * ClassificationBox API descriptors (unofficial)
 *
 * OpenAPI spec version: 1.0.1
 */
Object.defineProperty(exports, "__esModule", { value: true });
const url = require("url");
const axios_1 = require("axios");
const BASE_PATH = 'http://localhost:8080'.replace(/\/+$/, '');
/**
 *
 * @export
 */
exports.COLLECTION_FORMATS = {
    csv: ',',
    ssv: ' ',
    tsv: '\t',
    pipes: '|',
};
/**
 *
 * @export
 * @class BaseAPI
 */
class BaseAPI {
    constructor(configuration, basePath = BASE_PATH) {
        this.basePath = basePath;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}
exports.BaseAPI = BaseAPI;
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
class RequiredError extends Error {
    constructor(field, msg) {
        super(msg);
        this.field = field;
        this.name = 'RequiredError';
    }
}
exports.RequiredError = RequiredError;
/**
 * MetadataApi - axios parameter creator
 * @export
 */
exports.MetadataApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Returns some basic details about the box.
         * @summary GetBoxInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoxInfo(options = {}) {
            const localVarPath = `/info`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (configuration && configuration.userAgent) {
                localVarHeaderParameter['User-Agent'] = configuration.userAgent;
            }
            else {
                localVarHeaderParameter['User-Agent'] =
                    'Machinebox-SDK/1.0.1/javascript';
            }
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter['Authorization'] =
                    'Basic ' +
                        btoa(configuration.username + ':' + configuration.password);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * MetadataApi - functional programming interface
 * @export
 */
exports.MetadataApiFp = function (configuration) {
    return {
        /**
         * Returns some basic details about the box.
         * @summary GetBoxInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoxInfo(options) {
            const localVarAxiosArgs = exports.MetadataApiAxiosParamCreator(configuration).getBoxInfo(options);
            return (basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
                    url: basePath + localVarAxiosArgs.url,
                });
                return axios_1.default.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * MetadataApi - factory interface
 * @export
 */
exports.MetadataApiFactory = function (configuration, basePath) {
    return {
        /**
         * Returns some basic details about the box.
         * @summary GetBoxInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoxInfo(options) {
            return exports.MetadataApiFp(configuration).getBoxInfo(options)(basePath);
        },
    };
};
/**
 * MetadataApi - object-oriented interface
 * @export
 * @class MetadataApi
 * @extends {BaseAPI}
 */
class MetadataApi extends BaseAPI {
    /**
     * Returns some basic details about the box.
     * @summary GetBoxInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    getBoxInfo(options) {
        return exports.MetadataApiFp(this.configuration).getBoxInfo(options)(this.basePath);
    }
}
exports.MetadataApi = MetadataApi;
