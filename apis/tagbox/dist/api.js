"use strict";
// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * !!GENERATED FILE!!
 *
 * WARNING:  Do not edit this file, changes will be overwritten.
 *
 * Tagbox API
 * Tagbox API descriptors (unofficial)
 *
 * OpenAPI spec version: 1.0.1
 */
Object.defineProperty(exports, "__esModule", { value: true });
const url = require("url");
const axios_1 = require("axios");
const BASE_PATH = 'http://localhost:8080'.replace(/\/+$/, '');
/**
 *
 * @export
 */
exports.COLLECTION_FORMATS = {
    csv: ',',
    ssv: ' ',
    tsv: '\t',
    pipes: '|',
};
/**
 *
 * @export
 * @class BaseAPI
 */
class BaseAPI {
    constructor(configuration, basePath = BASE_PATH) {
        this.basePath = basePath;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}
exports.BaseAPI = BaseAPI;
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
class RequiredError extends Error {
    constructor(field, msg) {
        super(msg);
        this.field = field;
        this.name = 'RequiredError';
    }
}
exports.RequiredError = RequiredError;
/**
 * MetadataApi - axios parameter creator
 * @export
 */
exports.MetadataApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Returns some basic details about the box.
         * @summary GetBoxInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoxInfo(options = {}) {
            const localVarPath = `/info`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (configuration && configuration.userAgent) {
                localVarHeaderParameter['User-Agent'] = configuration.userAgent;
            }
            else {
                localVarHeaderParameter['User-Agent'] =
                    'Machinebox-SDK/1.0.1/javascript';
            }
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter['Authorization'] =
                    'Basic ' +
                        btoa(configuration.username + ':' + configuration.password);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * MetadataApi - functional programming interface
 * @export
 */
exports.MetadataApiFp = function (configuration) {
    return {
        /**
         * Returns some basic details about the box.
         * @summary GetBoxInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoxInfo(options) {
            const localVarAxiosArgs = exports.MetadataApiAxiosParamCreator(configuration).getBoxInfo(options);
            return (basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
                    url: basePath + localVarAxiosArgs.url,
                });
                return axios_1.default.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * MetadataApi - factory interface
 * @export
 */
exports.MetadataApiFactory = function (configuration, basePath) {
    return {
        /**
         * Returns some basic details about the box.
         * @summary GetBoxInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoxInfo(options) {
            return exports.MetadataApiFp(configuration).getBoxInfo(options)(basePath);
        },
    };
};
/**
 * MetadataApi - object-oriented interface
 * @export
 * @class MetadataApi
 * @extends {BaseAPI}
 */
class MetadataApi extends BaseAPI {
    /**
     * Returns some basic details about the box.
     * @summary GetBoxInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    getBoxInfo(options) {
        return exports.MetadataApiFp(this.configuration).getBoxInfo(options)(this.basePath);
    }
}
exports.MetadataApi = MetadataApi;
/**
 * TagboxApi - axios parameter creator
 * @export
 */
exports.TagboxApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get tags for a specified image
         * @summary CheckImage
         * @param {CheckImageRequest} [checkImageRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkImage(checkImageRequest, options = {}) {
            const localVarPath = `/tagbox/check`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (configuration && configuration.userAgent) {
                localVarHeaderParameter['User-Agent'] = configuration.userAgent;
            }
            else {
                localVarHeaderParameter['User-Agent'] =
                    'Machinebox-SDK/1.0.1/javascript';
            }
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter['Authorization'] =
                    'Basic ' +
                        btoa(configuration.username + ':' + configuration.password);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = 'CheckImageRequest' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(checkImageRequest || {})
                : checkImageRequest || '';
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a tag that has been previously taught
         * @summary Remove
         * @param {string} id The unique identifier of the item to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove(id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling remove.');
            }
            const localVarPath = `/tagbox/teach/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (configuration && configuration.userAgent) {
                localVarHeaderParameter['User-Agent'] = configuration.userAgent;
            }
            else {
                localVarHeaderParameter['User-Agent'] =
                    'Machinebox-SDK/1.0.1/javascript';
            }
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter['Authorization'] =
                    'Basic ' +
                        btoa(configuration.username + ':' + configuration.password);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get tags for a specified image
         * @summary RenameAll
         * @param {string} id The unique identifier of the item to patch
         * @param {RenameAllRequest} [renameAllRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renameAll(id, renameAllRequest, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling renameAll.');
            }
            const localVarPath = `/tagbox/rename/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (configuration && configuration.userAgent) {
                localVarHeaderParameter['User-Agent'] = configuration.userAgent;
            }
            else {
                localVarHeaderParameter['User-Agent'] =
                    'Machinebox-SDK/1.0.1/javascript';
            }
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter['Authorization'] =
                    'Basic ' +
                        btoa(configuration.username + ':' + configuration.password);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = 'RenameAllRequest' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(renameAllRequest || {})
                : renameAllRequest || '';
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get tags for a specified image
         * @summary RenameTagByID
         * @param {string} id The unique identifier of the item to patch
         * @param {PatchTagRequest} [patchTagRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renameTagByID(id, patchTagRequest, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling renameTagByID.');
            }
            const localVarPath = `/tagbox/rename/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (configuration && configuration.userAgent) {
                localVarHeaderParameter['User-Agent'] = configuration.userAgent;
            }
            else {
                localVarHeaderParameter['User-Agent'] =
                    'Machinebox-SDK/1.0.1/javascript';
            }
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter['Authorization'] =
                    'Basic ' +
                        btoa(configuration.username + ':' + configuration.password);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = 'PatchTagRequest' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(patchTagRequest || {})
                : patchTagRequest || '';
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns similar images based on the ID provided
         * @summary SimilarID
         * @param {string} id
         * @param {number} [limit] Format - double.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        similarID(id, limit, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling similarID.');
            }
            const localVarPath = `/tagbox/similar`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (configuration && configuration.userAgent) {
                localVarHeaderParameter['User-Agent'] = configuration.userAgent;
            }
            else {
                localVarHeaderParameter['User-Agent'] =
                    'Machinebox-SDK/1.0.1/javascript';
            }
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter['Authorization'] =
                    'Basic ' +
                        btoa(configuration.username + ':' + configuration.password);
            }
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Checks the image at the specified source for similar images based on tags previously taught.
         * @summary SimilarImage
         * @param {SimilarImageRequest} [similarImageRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        similarImage(similarImageRequest, options = {}) {
            const localVarPath = `/tagbox/similar`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (configuration && configuration.userAgent) {
                localVarHeaderParameter['User-Agent'] = configuration.userAgent;
            }
            else {
                localVarHeaderParameter['User-Agent'] =
                    'Machinebox-SDK/1.0.1/javascript';
            }
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter['Authorization'] =
                    'Basic ' +
                        btoa(configuration.username + ':' + configuration.password);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = 'SimilarImageRequest' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(similarImageRequest || {})
                : similarImageRequest || '';
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the /tagbox/teach endpoint to teach Tagbox a tag
         * @summary TeachCustomTag
         * @param {TeachCustomTagRequest} [teachCustomTagRequest] Teach TagBot about a tag in a specified image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teachCustomTag(teachCustomTagRequest, options = {}) {
            const localVarPath = `/tagbox/teach`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (configuration && configuration.userAgent) {
                localVarHeaderParameter['User-Agent'] = configuration.userAgent;
            }
            else {
                localVarHeaderParameter['User-Agent'] =
                    'Machinebox-SDK/1.0.1/javascript';
            }
            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter['Authorization'] =
                    'Basic ' +
                        btoa(configuration.username + ':' + configuration.password);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = 'TeachCustomTagRequest' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(teachCustomTagRequest || {})
                : teachCustomTagRequest || '';
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * TagboxApi - functional programming interface
 * @export
 */
exports.TagboxApiFp = function (configuration) {
    return {
        /**
         * Get tags for a specified image
         * @summary CheckImage
         * @param {CheckImageRequest} [checkImageRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkImage(checkImageRequest, options) {
            const localVarAxiosArgs = exports.TagboxApiAxiosParamCreator(configuration).checkImage(checkImageRequest, options);
            return (basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
                    url: basePath + localVarAxiosArgs.url,
                });
                return axios_1.default.request(axiosRequestArgs);
            };
        },
        /**
         * Remove a tag that has been previously taught
         * @summary Remove
         * @param {string} id The unique identifier of the item to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove(id, options) {
            const localVarAxiosArgs = exports.TagboxApiAxiosParamCreator(configuration).remove(id, options);
            return (basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
                    url: basePath + localVarAxiosArgs.url,
                });
                return axios_1.default.request(axiosRequestArgs);
            };
        },
        /**
         * Get tags for a specified image
         * @summary RenameAll
         * @param {string} id The unique identifier of the item to patch
         * @param {RenameAllRequest} [renameAllRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renameAll(id, renameAllRequest, options) {
            const localVarAxiosArgs = exports.TagboxApiAxiosParamCreator(configuration).renameAll(id, renameAllRequest, options);
            return (basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
                    url: basePath + localVarAxiosArgs.url,
                });
                return axios_1.default.request(axiosRequestArgs);
            };
        },
        /**
         * Get tags for a specified image
         * @summary RenameTagByID
         * @param {string} id The unique identifier of the item to patch
         * @param {PatchTagRequest} [patchTagRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renameTagByID(id, patchTagRequest, options) {
            const localVarAxiosArgs = exports.TagboxApiAxiosParamCreator(configuration).renameTagByID(id, patchTagRequest, options);
            return (basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
                    url: basePath + localVarAxiosArgs.url,
                });
                return axios_1.default.request(axiosRequestArgs);
            };
        },
        /**
         * Returns similar images based on the ID provided
         * @summary SimilarID
         * @param {string} id
         * @param {number} [limit] Format - double.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        similarID(id, limit, options) {
            const localVarAxiosArgs = exports.TagboxApiAxiosParamCreator(configuration).similarID(id, limit, options);
            return (basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
                    url: basePath + localVarAxiosArgs.url,
                });
                return axios_1.default.request(axiosRequestArgs);
            };
        },
        /**
         * Checks the image at the specified source for similar images based on tags previously taught.
         * @summary SimilarImage
         * @param {SimilarImageRequest} [similarImageRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        similarImage(similarImageRequest, options) {
            const localVarAxiosArgs = exports.TagboxApiAxiosParamCreator(configuration).similarImage(similarImageRequest, options);
            return (basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
                    url: basePath + localVarAxiosArgs.url,
                });
                return axios_1.default.request(axiosRequestArgs);
            };
        },
        /**
         * Use the /tagbox/teach endpoint to teach Tagbox a tag
         * @summary TeachCustomTag
         * @param {TeachCustomTagRequest} [teachCustomTagRequest] Teach TagBot about a tag in a specified image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teachCustomTag(teachCustomTagRequest, options) {
            const localVarAxiosArgs = exports.TagboxApiAxiosParamCreator(configuration).teachCustomTag(teachCustomTagRequest, options);
            return (basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
                    url: basePath + localVarAxiosArgs.url,
                });
                return axios_1.default.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * TagboxApi - factory interface
 * @export
 */
exports.TagboxApiFactory = function (configuration, basePath) {
    return {
        /**
         * Get tags for a specified image
         * @summary CheckImage
         * @param {CheckImageRequest} [checkImageRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkImage(checkImageRequest, options) {
            return exports.TagboxApiFp(configuration).checkImage(checkImageRequest, options)(basePath);
        },
        /**
         * Remove a tag that has been previously taught
         * @summary Remove
         * @param {string} id The unique identifier of the item to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove(id, options) {
            return exports.TagboxApiFp(configuration).remove(id, options)(basePath);
        },
        /**
         * Get tags for a specified image
         * @summary RenameAll
         * @param {string} id The unique identifier of the item to patch
         * @param {RenameAllRequest} [renameAllRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renameAll(id, renameAllRequest, options) {
            return exports.TagboxApiFp(configuration).renameAll(id, renameAllRequest, options)(basePath);
        },
        /**
         * Get tags for a specified image
         * @summary RenameTagByID
         * @param {string} id The unique identifier of the item to patch
         * @param {PatchTagRequest} [patchTagRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renameTagByID(id, patchTagRequest, options) {
            return exports.TagboxApiFp(configuration).renameTagByID(id, patchTagRequest, options)(basePath);
        },
        /**
         * Returns similar images based on the ID provided
         * @summary SimilarID
         * @param {string} id
         * @param {number} [limit] Format - double.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        similarID(id, limit, options) {
            return exports.TagboxApiFp(configuration).similarID(id, limit, options)(basePath);
        },
        /**
         * Checks the image at the specified source for similar images based on tags previously taught.
         * @summary SimilarImage
         * @param {SimilarImageRequest} [similarImageRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        similarImage(similarImageRequest, options) {
            return exports.TagboxApiFp(configuration).similarImage(similarImageRequest, options)(basePath);
        },
        /**
         * Use the /tagbox/teach endpoint to teach Tagbox a tag
         * @summary TeachCustomTag
         * @param {TeachCustomTagRequest} [teachCustomTagRequest] Teach TagBot about a tag in a specified image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teachCustomTag(teachCustomTagRequest, options) {
            return exports.TagboxApiFp(configuration).teachCustomTag(teachCustomTagRequest, options)(basePath);
        },
    };
};
/**
 * TagboxApi - object-oriented interface
 * @export
 * @class TagboxApi
 * @extends {BaseAPI}
 */
class TagboxApi extends BaseAPI {
    /**
     * Get tags for a specified image
     * @summary CheckImage
     * @param {CheckImageRequest} [checkImageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagboxApi
     */
    checkImage(checkImageRequest, options) {
        return exports.TagboxApiFp(this.configuration).checkImage(checkImageRequest, options)(this.basePath);
    }
    /**
     * Remove a tag that has been previously taught
     * @summary Remove
     * @param {string} id The unique identifier of the item to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagboxApi
     */
    remove(id, options) {
        return exports.TagboxApiFp(this.configuration).remove(id, options)(this.basePath);
    }
    /**
     * Get tags for a specified image
     * @summary RenameAll
     * @param {string} id The unique identifier of the item to patch
     * @param {RenameAllRequest} [renameAllRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagboxApi
     */
    renameAll(id, renameAllRequest, options) {
        return exports.TagboxApiFp(this.configuration).renameAll(id, renameAllRequest, options)(this.basePath);
    }
    /**
     * Get tags for a specified image
     * @summary RenameTagByID
     * @param {string} id The unique identifier of the item to patch
     * @param {PatchTagRequest} [patchTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagboxApi
     */
    renameTagByID(id, patchTagRequest, options) {
        return exports.TagboxApiFp(this.configuration).renameTagByID(id, patchTagRequest, options)(this.basePath);
    }
    /**
     * Returns similar images based on the ID provided
     * @summary SimilarID
     * @param {string} id
     * @param {number} [limit] Format - double.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagboxApi
     */
    similarID(id, limit, options) {
        return exports.TagboxApiFp(this.configuration).similarID(id, limit, options)(this.basePath);
    }
    /**
     * Checks the image at the specified source for similar images based on tags previously taught.
     * @summary SimilarImage
     * @param {SimilarImageRequest} [similarImageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagboxApi
     */
    similarImage(similarImageRequest, options) {
        return exports.TagboxApiFp(this.configuration).similarImage(similarImageRequest, options)(this.basePath);
    }
    /**
     * Use the /tagbox/teach endpoint to teach Tagbox a tag
     * @summary TeachCustomTag
     * @param {TeachCustomTagRequest} [teachCustomTagRequest] Teach TagBot about a tag in a specified image
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagboxApi
     */
    teachCustomTag(teachCustomTagRequest, options) {
        return exports.TagboxApiFp(this.configuration).teachCustomTag(teachCustomTagRequest, options)(this.basePath);
    }
}
exports.TagboxApi = TagboxApi;
