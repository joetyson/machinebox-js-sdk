/**
 * !!GENERATED FILE!!
 *
 * WARNING:  Do not edit this file, changes will be overwritten.
 *
 * Tagbox API
 * Tagbox API descriptors (unofficial)
 *
 * OpenAPI spec version: 1.0.1
 */
/// <reference path="../custom.d.ts" />
import { Configuration } from './configuration';
import { AxiosPromise } from 'axios';
/**
 *
 * @export
 */
export declare const COLLECTION_FORMATS: {
    csv: string;
    ssv: string;
    tsv: string;
    pipes: string;
};
/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: any;
}
/**
 *
 * @export
 * @class BaseAPI
 */
export declare class BaseAPI {
    protected basePath: string;
    protected configuration: Configuration | undefined;
    constructor(configuration?: Configuration, basePath?: string);
}
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export declare class RequiredError extends Error {
    field: string;
    name: 'RequiredError';
    constructor(field: string, msg?: string);
}
/**
 *
 * @export
 * @interface CheckApiResponse
 */
export interface CheckApiResponse {
    /**
     *
     * @type {boolean}
     * @memberof CheckApiResponse
     */
    success?: boolean;
    /**
     *
     * @type {Array<StandardTagScore>}
     * @memberof CheckApiResponse
     */
    tags?: Array<StandardTagScore>;
    /**
     *
     * @type {Array<CustomTagScore>}
     * @memberof CheckApiResponse
     */
    customTags?: Array<CustomTagScore>;
}
/**
 *
 * @export
 * @interface CheckImageRequest
 */
export interface CheckImageRequest {
    /**
     *
     * @type {string}
     * @memberof CheckImageRequest
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof CheckImageRequest
     */
    base64?: string;
}
/**
 *
 * @export
 * @interface CustomTagScore
 */
export interface CustomTagScore {
    /**
     * Tag within Tagbox
     * @type {string}
     * @memberof CustomTagScore
     */
    tag: string;
    /**
     *
     * @type {number}
     * @memberof CustomTagScore
     */
    confidence: number;
    /**
     * ID within Tagbox
     * @type {string}
     * @memberof CustomTagScore
     */
    id: string;
}
/**
 *
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     *
     * @type {string}
     * @memberof InlineResponse200
     */
    build?: string;
    /**
     *
     * @type {boolean}
     * @memberof InlineResponse200
     */
    success?: boolean;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200
     */
    name?: string;
    /**
     *
     * @type {number}
     * @memberof InlineResponse200
     */
    version?: number;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200
     */
    plan?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200
     */
    status?: string;
}
/**
 *
 * @export
 * @interface NotFoundError
 */
export interface NotFoundError {
    /**
     *
     * @type {boolean}
     * @memberof NotFoundError
     */
    success: boolean;
    /**
     *
     * @type {string}
     * @memberof NotFoundError
     */
    error: string;
}
/**
 *
 * @export
 * @interface PatchTagRequest
 */
export interface PatchTagRequest {
    /**
     *
     * @type {string}
     * @memberof PatchTagRequest
     */
    tag: string;
}
/**
 *
 * @export
 * @interface RenameAllRequest
 */
export interface RenameAllRequest {
    /**
     *
     * @type {string}
     * @memberof RenameAllRequest
     */
    from?: string;
    /**
     *
     * @type {string}
     * @memberof RenameAllRequest
     */
    to?: string;
}
/**
 *
 * @export
 * @interface SimilarApiResponse
 */
export interface SimilarApiResponse {
    /**
     *
     * @type {boolean}
     * @memberof SimilarApiResponse
     */
    successs?: boolean;
    /**
     *
     * @type {number}
     * @memberof SimilarApiResponse
     */
    tagsCount?: number;
    /**
     *
     * @type {Array<CustomTagScore>}
     * @memberof SimilarApiResponse
     */
    similar?: Array<CustomTagScore>;
}
/**
 *
 * @export
 * @interface SimilarImageRequest
 */
export interface SimilarImageRequest {
    /**
     *
     * @type {string}
     * @memberof SimilarImageRequest
     */
    url?: string;
    /**
     *
     * @type {number}
     * @memberof SimilarImageRequest
     */
    limit?: number;
    /**
     *
     * @type {string}
     * @memberof SimilarImageRequest
     */
    base64?: string;
}
/**
 *
 * @export
 * @interface StandardTagScore
 */
export interface StandardTagScore {
    /**
     * Tag within Tagbox
     * @type {string}
     * @memberof StandardTagScore
     */
    tag: string;
    /**
     *
     * @type {number}
     * @memberof StandardTagScore
     */
    confidence: number;
}
/**
 *
 * @export
 * @interface SuccessfulAPIResponse
 */
export interface SuccessfulAPIResponse {
    /**
     *
     * @type {boolean}
     * @memberof SuccessfulAPIResponse
     */
    successs?: boolean;
}
/**
 *
 * @export
 * @interface TeachCustomTagRequest
 */
export interface TeachCustomTagRequest {
    /**
     * Tag within Tagbox
     * @type {string}
     * @memberof TeachCustomTagRequest
     */
    tag: string;
    /**
     * ID within Tagbox
     * @type {string}
     * @memberof TeachCustomTagRequest
     */
    id?: string;
    /**
     * URL to an image
     * @type {string}
     * @memberof TeachCustomTagRequest
     */
    url?: string;
    /**
     * Base64 encoded image
     * @type {string}
     * @memberof TeachCustomTagRequest
     */
    base64?: string;
}
/**
 *
 * @export
 * @interface UnauthorizedError
 */
export interface UnauthorizedError {
    /**
     *
     * @type {boolean}
     * @memberof UnauthorizedError
     */
    success: boolean;
    /**
     *
     * @type {string}
     * @memberof UnauthorizedError
     */
    error: string;
}
/**
 *
 * @export
 * @interface UnexpectedError
 */
export interface UnexpectedError {
    /**
     *
     * @type {boolean}
     * @memberof UnexpectedError
     */
    success: boolean;
    /**
     *
     * @type {string}
     * @memberof UnexpectedError
     */
    error: string;
}
/**
 * MetadataApi - axios parameter creator
 * @export
 */
export declare const MetadataApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Returns some basic details about the box.
     * @summary GetBoxInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBoxInfo(options?: any): RequestArgs;
};
/**
 * MetadataApi - functional programming interface
 * @export
 */
export declare const MetadataApiFp: (configuration?: Configuration) => {
    /**
     * Returns some basic details about the box.
     * @summary GetBoxInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBoxInfo(options?: any): (basePath?: string) => AxiosPromise<InlineResponse200>;
};
/**
 * MetadataApi - factory interface
 * @export
 */
export declare const MetadataApiFactory: (configuration?: Configuration, basePath?: string) => {
    /**
     * Returns some basic details about the box.
     * @summary GetBoxInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBoxInfo(options?: any): AxiosPromise<InlineResponse200>;
};
/**
 * MetadataApi - interface
 * @export
 * @interface MetadataApi
 */
export interface MetadataApiInterface {
    /**
     * Returns some basic details about the box.
     * @summary GetBoxInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApiInterface
     */
    getBoxInfo(options?: any): AxiosPromise<InlineResponse200>;
}
/**
 * MetadataApi - object-oriented interface
 * @export
 * @class MetadataApi
 * @extends {BaseAPI}
 */
export declare class MetadataApi extends BaseAPI implements MetadataApiInterface {
    /**
     * Returns some basic details about the box.
     * @summary GetBoxInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    getBoxInfo(options?: any): AxiosPromise<InlineResponse200>;
}
/**
 * TagboxApi - axios parameter creator
 * @export
 */
export declare const TagboxApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get tags for a specified image
     * @summary CheckImage
     * @param {CheckImageRequest} [checkImageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkImage(checkImageRequest?: CheckImageRequest, options?: any): RequestArgs;
    /**
     * Remove a tag that has been previously taught
     * @summary Remove
     * @param {string} id The unique identifier of the item to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    remove(id: string, options?: any): RequestArgs;
    /**
     * Get tags for a specified image
     * @summary RenameAll
     * @param {string} id The unique identifier of the item to patch
     * @param {RenameAllRequest} [renameAllRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    renameAll(id: string, renameAllRequest?: RenameAllRequest, options?: any): RequestArgs;
    /**
     * Get tags for a specified image
     * @summary RenameTagByID
     * @param {string} id The unique identifier of the item to patch
     * @param {PatchTagRequest} [patchTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    renameTagByID(id: string, patchTagRequest?: PatchTagRequest, options?: any): RequestArgs;
    /**
     * Returns similar images based on the ID provided
     * @summary SimilarID
     * @param {string} id
     * @param {number} [limit] Format - double.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    similarID(id: string, limit?: number, options?: any): RequestArgs;
    /**
     * Checks the image at the specified source for similar images based on tags previously taught.
     * @summary SimilarImage
     * @param {SimilarImageRequest} [similarImageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    similarImage(similarImageRequest?: SimilarImageRequest, options?: any): RequestArgs;
    /**
     * Use the /tagbox/teach endpoint to teach Tagbox a tag
     * @summary TeachCustomTag
     * @param {TeachCustomTagRequest} [teachCustomTagRequest] Teach TagBot about a tag in a specified image
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teachCustomTag(teachCustomTagRequest?: TeachCustomTagRequest, options?: any): RequestArgs;
};
/**
 * TagboxApi - functional programming interface
 * @export
 */
export declare const TagboxApiFp: (configuration?: Configuration) => {
    /**
     * Get tags for a specified image
     * @summary CheckImage
     * @param {CheckImageRequest} [checkImageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkImage(checkImageRequest?: CheckImageRequest, options?: any): (basePath?: string) => AxiosPromise<CheckApiResponse>;
    /**
     * Remove a tag that has been previously taught
     * @summary Remove
     * @param {string} id The unique identifier of the item to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    remove(id: string, options?: any): (basePath?: string) => AxiosPromise<SuccessfulAPIResponse>;
    /**
     * Get tags for a specified image
     * @summary RenameAll
     * @param {string} id The unique identifier of the item to patch
     * @param {RenameAllRequest} [renameAllRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    renameAll(id: string, renameAllRequest?: RenameAllRequest, options?: any): (basePath?: string) => AxiosPromise<SuccessfulAPIResponse>;
    /**
     * Get tags for a specified image
     * @summary RenameTagByID
     * @param {string} id The unique identifier of the item to patch
     * @param {PatchTagRequest} [patchTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    renameTagByID(id: string, patchTagRequest?: PatchTagRequest, options?: any): (basePath?: string) => AxiosPromise<SuccessfulAPIResponse>;
    /**
     * Returns similar images based on the ID provided
     * @summary SimilarID
     * @param {string} id
     * @param {number} [limit] Format - double.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    similarID(id: string, limit?: number, options?: any): (basePath?: string) => AxiosPromise<SimilarApiResponse>;
    /**
     * Checks the image at the specified source for similar images based on tags previously taught.
     * @summary SimilarImage
     * @param {SimilarImageRequest} [similarImageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    similarImage(similarImageRequest?: SimilarImageRequest, options?: any): (basePath?: string) => AxiosPromise<SimilarApiResponse>;
    /**
     * Use the /tagbox/teach endpoint to teach Tagbox a tag
     * @summary TeachCustomTag
     * @param {TeachCustomTagRequest} [teachCustomTagRequest] Teach TagBot about a tag in a specified image
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teachCustomTag(teachCustomTagRequest?: TeachCustomTagRequest, options?: any): (basePath?: string) => AxiosPromise<SuccessfulAPIResponse>;
};
/**
 * TagboxApi - factory interface
 * @export
 */
export declare const TagboxApiFactory: (configuration?: Configuration, basePath?: string) => {
    /**
     * Get tags for a specified image
     * @summary CheckImage
     * @param {CheckImageRequest} [checkImageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkImage(checkImageRequest?: CheckImageRequest, options?: any): AxiosPromise<CheckApiResponse>;
    /**
     * Remove a tag that has been previously taught
     * @summary Remove
     * @param {string} id The unique identifier of the item to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    remove(id: string, options?: any): AxiosPromise<SuccessfulAPIResponse>;
    /**
     * Get tags for a specified image
     * @summary RenameAll
     * @param {string} id The unique identifier of the item to patch
     * @param {RenameAllRequest} [renameAllRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    renameAll(id: string, renameAllRequest?: RenameAllRequest, options?: any): AxiosPromise<SuccessfulAPIResponse>;
    /**
     * Get tags for a specified image
     * @summary RenameTagByID
     * @param {string} id The unique identifier of the item to patch
     * @param {PatchTagRequest} [patchTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    renameTagByID(id: string, patchTagRequest?: PatchTagRequest, options?: any): AxiosPromise<SuccessfulAPIResponse>;
    /**
     * Returns similar images based on the ID provided
     * @summary SimilarID
     * @param {string} id
     * @param {number} [limit] Format - double.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    similarID(id: string, limit?: number, options?: any): AxiosPromise<SimilarApiResponse>;
    /**
     * Checks the image at the specified source for similar images based on tags previously taught.
     * @summary SimilarImage
     * @param {SimilarImageRequest} [similarImageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    similarImage(similarImageRequest?: SimilarImageRequest, options?: any): AxiosPromise<SimilarApiResponse>;
    /**
     * Use the /tagbox/teach endpoint to teach Tagbox a tag
     * @summary TeachCustomTag
     * @param {TeachCustomTagRequest} [teachCustomTagRequest] Teach TagBot about a tag in a specified image
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teachCustomTag(teachCustomTagRequest?: TeachCustomTagRequest, options?: any): AxiosPromise<SuccessfulAPIResponse>;
};
/**
 * TagboxApi - interface
 * @export
 * @interface TagboxApi
 */
export interface TagboxApiInterface {
    /**
     * Get tags for a specified image
     * @summary CheckImage
     * @param {CheckImageRequest} [checkImageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagboxApiInterface
     */
    checkImage(checkImageRequest?: CheckImageRequest, options?: any): AxiosPromise<CheckApiResponse>;
    /**
     * Remove a tag that has been previously taught
     * @summary Remove
     * @param {string} id The unique identifier of the item to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagboxApiInterface
     */
    remove(id: string, options?: any): AxiosPromise<SuccessfulAPIResponse>;
    /**
     * Get tags for a specified image
     * @summary RenameAll
     * @param {string} id The unique identifier of the item to patch
     * @param {RenameAllRequest} [renameAllRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagboxApiInterface
     */
    renameAll(id: string, renameAllRequest?: RenameAllRequest, options?: any): AxiosPromise<SuccessfulAPIResponse>;
    /**
     * Get tags for a specified image
     * @summary RenameTagByID
     * @param {string} id The unique identifier of the item to patch
     * @param {PatchTagRequest} [patchTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagboxApiInterface
     */
    renameTagByID(id: string, patchTagRequest?: PatchTagRequest, options?: any): AxiosPromise<SuccessfulAPIResponse>;
    /**
     * Returns similar images based on the ID provided
     * @summary SimilarID
     * @param {string} id
     * @param {number} [limit] Format - double.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagboxApiInterface
     */
    similarID(id: string, limit?: number, options?: any): AxiosPromise<SimilarApiResponse>;
    /**
     * Checks the image at the specified source for similar images based on tags previously taught.
     * @summary SimilarImage
     * @param {SimilarImageRequest} [similarImageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagboxApiInterface
     */
    similarImage(similarImageRequest?: SimilarImageRequest, options?: any): AxiosPromise<SimilarApiResponse>;
    /**
     * Use the /tagbox/teach endpoint to teach Tagbox a tag
     * @summary TeachCustomTag
     * @param {TeachCustomTagRequest} [teachCustomTagRequest] Teach TagBot about a tag in a specified image
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagboxApiInterface
     */
    teachCustomTag(teachCustomTagRequest?: TeachCustomTagRequest, options?: any): AxiosPromise<SuccessfulAPIResponse>;
}
/**
 * TagboxApi - object-oriented interface
 * @export
 * @class TagboxApi
 * @extends {BaseAPI}
 */
export declare class TagboxApi extends BaseAPI implements TagboxApiInterface {
    /**
     * Get tags for a specified image
     * @summary CheckImage
     * @param {CheckImageRequest} [checkImageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagboxApi
     */
    checkImage(checkImageRequest?: CheckImageRequest, options?: any): AxiosPromise<CheckApiResponse>;
    /**
     * Remove a tag that has been previously taught
     * @summary Remove
     * @param {string} id The unique identifier of the item to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagboxApi
     */
    remove(id: string, options?: any): AxiosPromise<SuccessfulAPIResponse>;
    /**
     * Get tags for a specified image
     * @summary RenameAll
     * @param {string} id The unique identifier of the item to patch
     * @param {RenameAllRequest} [renameAllRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagboxApi
     */
    renameAll(id: string, renameAllRequest?: RenameAllRequest, options?: any): AxiosPromise<SuccessfulAPIResponse>;
    /**
     * Get tags for a specified image
     * @summary RenameTagByID
     * @param {string} id The unique identifier of the item to patch
     * @param {PatchTagRequest} [patchTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagboxApi
     */
    renameTagByID(id: string, patchTagRequest?: PatchTagRequest, options?: any): AxiosPromise<SuccessfulAPIResponse>;
    /**
     * Returns similar images based on the ID provided
     * @summary SimilarID
     * @param {string} id
     * @param {number} [limit] Format - double.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagboxApi
     */
    similarID(id: string, limit?: number, options?: any): AxiosPromise<SimilarApiResponse>;
    /**
     * Checks the image at the specified source for similar images based on tags previously taught.
     * @summary SimilarImage
     * @param {SimilarImageRequest} [similarImageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagboxApi
     */
    similarImage(similarImageRequest?: SimilarImageRequest, options?: any): AxiosPromise<SimilarApiResponse>;
    /**
     * Use the /tagbox/teach endpoint to teach Tagbox a tag
     * @summary TeachCustomTag
     * @param {TeachCustomTagRequest} [teachCustomTagRequest] Teach TagBot about a tag in a specified image
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagboxApi
     */
    teachCustomTag(teachCustomTagRequest?: TeachCustomTagRequest, options?: any): AxiosPromise<SuccessfulAPIResponse>;
}
